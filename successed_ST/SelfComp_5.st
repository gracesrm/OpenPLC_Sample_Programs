TYPE
    MAGAZIN_STATES_T : (GREEN_LAMP , INIT , INTERSTEP , MAGAZIN_INIT , MAGAZIN_INIT_2 , SLIDER_MOVE_BACK , START_MAGAZIN , STEP0 , STEP1 , CONVEY);
    STAMP_STATES_T : (GREEN_LAMP , INIT , INTERSTEP , INTERSTEP_2 , STAMPPROCESS , STAMPSLIDERBACK , STAMPSLIDERFORWARD , STAMP_INIT_1 , STAMP_INIT_2 , STAMP_INIT_3 , STAMP_INIT_4 , START_STAMP , STEP0 , STEP1 , STEP2);
    CRANE_STATES_T : (CRANE_GO_UP , CRANE_INIT , CRANE_INIT_2 , CRANE_LIFT_AT_STAMP , CRANE_LIFT_CONVEYOR , CRANE_LIFT_CONVEYOR_BLACK , CRANE_LIFT_MAGAZIN , CRANE_LIFT_MAGAZIN_METALLIC , CRANE_LIFT_NOT_METALLIC_BLACK , CRANE_LOWER , CRANE_ON_CONVEYOR , CRANE_ON_CONVEYOR_METALLIC , CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK , CRANE_ON_STAMP_METALLIC , CRANE_ON_STAMP_STOP_BLACK , CRANE_TURN_LEFT_BACK_TO_STAMP , CRANE_TURN_LEFT_FROM_STAMP , CRANE_TURN_LEFT_METALLIC , CRANE_TURN_LEFT_NOT_METALLIC , CRANE_TURN_LEFT_NOT_METALLIC_BLACK , INIT , INTERSTEP , INTERSTEP_2 , LAST_WORKPIECE_AT_STAMP , LOWER_CRANE , MAGAZIN_STOP , MAGAZIN_STOP_BLACK , NO_WORKPIECE_READY , RESET_INTERCONNECT , START_CRANE , STEP0 , SUCK_AT_STAMP , TIMEDELAY , TURN_RIGHT , TURN_RIGHT_BLACK , PAUSE , RELEASE , RELEASE_BLACK , RELEASE_WORKPIECE);
END_TYPE



PROGRAM PRODUCT 
 
VAR_OUTPUT   A_ACTUATOR_ANALOGCRANEPRESSURE  : INT; END_VAR
VAR_OUTPUT   A_ACTUATOR_CRANELOWER  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_CRANETURNCLOCKWISE  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_MAGAZINGREENLAMP  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_MAGAZINSLIDER  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_MAGAZINVACUUMOFF  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_MAGAZINVACUUMON  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_MAGAZINWHITELAMP  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_STAMPGREENLAMP  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_STAMPPUSHER  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_STAMPSLIDERMOVEDIN  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_STAMPSLIDERMOVEDOUT  : BOOL; END_VAR
VAR_OUTPUT   A_ACTUATOR_STAMPWHITELAMP  : BOOL; END_VAR
VAR   A_CRANE_CRANTURNCLOCKWISE  : BOOL; END_VAR
VAR   A_CRANE_CRANEDOWN  : BOOL; END_VAR
VAR   A_CRANE_CRANELOWER  : BOOL; END_VAR
VAR   A_CRANE_CRANEONCONVEYOR  : BOOL; END_VAR
VAR   A_CRANE_CRANEONMAGAZIN  : BOOL; END_VAR
VAR   A_CRANE_CRANEPOSITIONSTAMP  : BOOL; END_VAR
VAR   A_CRANE_CRANESUCKED  : BOOL; END_VAR
VAR   A_CRANE_CRANETURNCLOCKWISE  : BOOL; END_VAR
VAR   A_CRANE_CRANETURNCOUNTERCLOCKWISE  : BOOL; END_VAR
VAR   A_CRANE_CRANEUP  : BOOL; END_VAR
VAR   A_CRANE_DURATION1  : UINT := UINT#5; END_VAR
VAR   A_CRANE_MAGAZINCAPACITIVESENSOR  : BOOL; END_VAR
VAR   A_CRANE_MAGAZINSLIDER  : BOOL; END_VAR
VAR   A_CRANE_MAGAZINVACUUMOFF  : BOOL; END_VAR
VAR   A_CRANE_MAGAZINVACUUMON  : BOOL; END_VAR
VAR   A_CRANE_SFCINIT  : BOOL; END_VAR
VAR   A_CRANE_SFCRESET  : BOOL; END_VAR
VAR   A_CRANE_SLIDERMOVEDOUT  : BOOL; END_VAR
VAR   A_CRANE_SLIDERNOTMOVEDOUT  : BOOL; END_VAR
VAR   A_CRANE_STAMPLOWERED  : BOOL; END_VAR
VAR   A_CRANE_STAMPSLIDERFILLED  : BOOL; END_VAR
VAR   A_CRANE_STARTBUTTONMAGAZIN  : BOOL; END_VAR
VAR   A_CRANE_STARTCOMMANDCRANE  : BOOL; END_VAR
VAR   A_CRANE_STARTVAR  : BOOL; END_VAR
VAR   A_CRANE_TIMEDELAY_TIMER_ET  : UINT; END_VAR
VAR   A_CRANE_TIMEDELAY_TIMER_IN  : BOOL; END_VAR
VAR   A_CRANE_TIMEDELAY_TIMER_PT  : UINT; END_VAR
VAR   A_CRANE_TIMEDELAY_TIMER_Q  : BOOL; END_VAR
VAR   A_CRANE_TIMEDELAY_TIMER_DURATION  : UINT  := UINT#12; END_VAR
VAR   A_CRANE_TIMEDELAY_TIMER_INTERCONNECT  : BOOL; END_VAR
VAR   A_CRANE_TIMER1_ET  : UINT; END_VAR
VAR   A_CRANE_TIMER1_IN  : BOOL; END_VAR
VAR   A_CRANE_TIMER1_PT  : UINT; END_VAR
VAR   A_CRANE_TIMER1_Q  : BOOL; END_VAR
VAR   A_CRANE_WORKPIECEREADY  : BOOL; END_VAR
VAR   A_CRANE_2STATE  : CRANE_STATES_T; END_VAR
VAR   A_CRANE_2TRANSIT  : BOOL; END_VAR
VAR   A_CRANE_ACTUALTIME1  : INT; END_VAR
VAR   A_CRANE_INTERCONNECT  : BOOL; END_VAR
VAR   A_CRANE_INTERCONNECTCRANESTARTCOMMAND  : BOOL; END_VAR
VAR   A_MAG_CRANEDOWN  : BOOL; END_VAR
VAR   A_MAG_CRANELOWER  : BOOL; END_VAR
VAR   A_MAG_CRANEONCONVEYOR  : BOOL; END_VAR
VAR   A_MAG_CRANEONMAGAZIN  : BOOL; END_VAR
VAR   A_MAG_CRANESUCKED  : BOOL; END_VAR
VAR   A_MAG_CRANETURNCLOCKWISE  : BOOL; END_VAR
VAR   A_MAG_CRANETURNCOUNTERCLOCKWISE  : BOOL; END_VAR
VAR   A_MAG_CRANEUP  : BOOL; END_VAR
VAR   A_MAG_MAGAZINGREENLAMP  : BOOL; END_VAR
VAR   A_MAG_MAGAZINSLIDER  : BOOL; END_VAR
VAR   A_MAG_MAGAZINVACUUMOFF  : BOOL; END_VAR
VAR   A_MAG_MAGAZINVACUUMON  : BOOL; END_VAR
VAR   A_MAG_MAGAZINWHITELAMP  : BOOL; END_VAR
VAR   A_MAG_SFCINIT  : BOOL; END_VAR
VAR   A_MAG_SFCRESET  : BOOL; END_VAR
VAR   A_MAG_SLIDERMOVEDOUT  : BOOL; END_VAR
VAR   A_MAG_SLIDERNOTMOVEDOUT  : BOOL; END_VAR
VAR   A_MAG_STARTBUTTONMAGAZIN  : BOOL; END_VAR
VAR   A_MAG_STARTCOMMANDMAGAZIN  : BOOL; END_VAR
VAR   A_MAG_STARTVAR  : BOOL; END_VAR
VAR   A_MAG_WORKPIECEREADY  : BOOL; END_VAR
VAR   A_MAG_2STATE  : MAGAZIN_STATES_T; END_VAR
VAR   A_MAG_2TRANSIT  : BOOL; END_VAR
VAR   A_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANEDOWN  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANEONCONVEYOR  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANEONMAGAZIN  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANEPOSITION  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANEPOSITIONSTAMP  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANESUCKED  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_CRANEUP  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_MAGAZINCAPACITIVESENSOR  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_MAGAZINEMERGENCYSTOP  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_MAGAZINOPTICALSENSOR  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_MAGAZINSWITCHMANUELLAUTOMATIC  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_SLIDERMOVEDOUT  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_SLIDERNOTMOVEDOUT  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPEMERGENCYSTOP  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPLOWERED  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPSLIDERFILLED  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPSLIDERSENSORMOVEDIN  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPSLIDERSENSORMOVEDOUT  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPSTARTBUTTON  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPSWITCHMANUELLAUTOMATIC  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STAMPUP  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_STARTBUTTONMAGAZIN  : BOOL; END_VAR
VAR_INPUT   A_SENSOR_WORKPIECEREADY  : BOOL; END_VAR
VAR   A_STAMP_CRANEDOWN  : BOOL; END_VAR
VAR   A_STAMP_CRANEONCONVEYOR  : BOOL; END_VAR
VAR   A_STAMP_CRANEPOSITIONSTAMP  : BOOL; END_VAR
VAR   A_STAMP_CRANESUCKED  : BOOL; END_VAR
VAR   A_STAMP_CRANEUP  : BOOL; END_VAR
VAR   A_STAMP_DURATION  : UINT  := UINT#15; END_VAR
VAR   A_STAMP_SFCINIT  : BOOL; END_VAR
VAR   A_STAMP_SFCRESET  : BOOL; END_VAR
VAR   A_STAMP_STAMPGREENLAMP  : BOOL; END_VAR
VAR   A_STAMP_STAMPLOWERED  : BOOL; END_VAR
VAR   A_STAMP_STAMPPRESSURE  : BOOL; END_VAR
VAR   A_STAMP_STAMPPUSHER  : BOOL; END_VAR
VAR   A_STAMP_STAMPSLIDERFILLED  : BOOL; END_VAR
VAR   A_STAMP_STAMPSLIDERMOVEDIN  : BOOL; END_VAR
VAR   A_STAMP_STAMPSLIDERMOVEDOUT  : BOOL; END_VAR
VAR   A_STAMP_STAMPSLIDERSENSORMOVEDIN  : BOOL; END_VAR
VAR   A_STAMP_STAMPSLIDERSENSORMOVEDOUT  : BOOL; END_VAR
VAR   A_STAMP_STAMPSTARTBUTTON  : BOOL; END_VAR
VAR   A_STAMP_STAMPUP  : BOOL; END_VAR
VAR   A_STAMP_STAMPWHITELAMP  : BOOL; END_VAR
VAR   A_STAMP_STARTCOMMANDSTAMP  : BOOL; END_VAR
VAR   A_STAMP_STARTVAR  : BOOL; END_VAR
VAR   A_STAMP_TIMER_ET  : UINT; END_VAR
VAR   A_STAMP_TIMER_IN  : BOOL; END_VAR
VAR   A_STAMP_TIMER_PT  : UINT; END_VAR
VAR   A_STAMP_TIMER_Q  : BOOL; END_VAR
VAR   A_STAMP_2STATE  : STAMP_STATES_T; END_VAR
VAR   A_STAMP_2TRANSIT  : BOOL; END_VAR
VAR   A_STAMP_INTERCONNECT  : BOOL; END_VAR
VAR   A_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  : BOOL; END_VAR

VAR   A_DIAGNOSIS_ACTIVE  : BOOL; END_VAR
VAR_INPUT  A_PARAMETER_CRANE_PRESSURE  : INT := INT#6000; END_VAR



(* -------------------------------------------------------------------------------- *)

VAR_OUTPUT   B_ACTUATOR_ANALOGCRANEPRESSURE  : INT; END_VAR
VAR_OUTPUT   B_ACTUATOR_CRANELOWER  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_CRANETURNCLOCKWISE  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_MAGAZINGREENLAMP  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_MAGAZINSLIDER  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_MAGAZINVACUUMOFF  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_MAGAZINVACUUMON  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_MAGAZINWHITELAMP  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_STAMPGREENLAMP  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_STAMPPUSHER  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_STAMPSLIDERMOVEDIN  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_STAMPSLIDERMOVEDOUT  : BOOL; END_VAR
VAR_OUTPUT   B_ACTUATOR_STAMPWHITELAMP  : BOOL; END_VAR
VAR   B_CRANE_CRANTURNCLOCKWISE  : BOOL; END_VAR
VAR   B_CRANE_CRANEDOWN  : BOOL; END_VAR
VAR   B_CRANE_CRANELOWER  : BOOL; END_VAR
VAR   B_CRANE_CRANEONCONVEYOR  : BOOL; END_VAR
VAR   B_CRANE_CRANEONMAGAZIN  : BOOL; END_VAR
VAR   B_CRANE_CRANEPOSITIONSTAMP  : BOOL; END_VAR
VAR   B_CRANE_CRANESUCKED  : BOOL; END_VAR
VAR   B_CRANE_CRANETURNCLOCKWISE  : BOOL; END_VAR
VAR   B_CRANE_CRANETURNCOUNTERCLOCKWISE  : BOOL; END_VAR
VAR   B_CRANE_CRANEUP  : BOOL; END_VAR
VAR   B_CRANE_DURATION1  : UINT := UINT#5; END_VAR
VAR   B_CRANE_MAGAZINCAPACITIVESENSOR  : BOOL; END_VAR
VAR   B_CRANE_MAGAZINSLIDER  : BOOL; END_VAR
VAR   B_CRANE_MAGAZINVACUUMOFF  : BOOL; END_VAR
VAR   B_CRANE_MAGAZINVACUUMON  : BOOL; END_VAR
VAR   B_CRANE_SFCINIT  : BOOL; END_VAR
VAR   B_CRANE_SFCRESET  : BOOL; END_VAR
VAR   B_CRANE_SLIDERMOVEDOUT  : BOOL; END_VAR
VAR   B_CRANE_SLIDERNOTMOVEDOUT  : BOOL; END_VAR
VAR   B_CRANE_STAMPLOWERED  : BOOL; END_VAR
VAR   B_CRANE_STAMPSLIDERFILLED  : BOOL; END_VAR
VAR   B_CRANE_STARTBUTTONMAGAZIN  : BOOL; END_VAR
VAR   B_CRANE_STARTCOMMANDCRANE  : BOOL; END_VAR
VAR   B_CRANE_STARTVAR  : BOOL; END_VAR
VAR   B_CRANE_TIMEDELAY_TIMER_ET  : UINT; END_VAR
VAR   B_CRANE_TIMEDELAY_TIMER_IN  : BOOL; END_VAR
VAR   B_CRANE_TIMEDELAY_TIMER_PT  : UINT; END_VAR
VAR   B_CRANE_TIMEDELAY_TIMER_Q  : BOOL; END_VAR
VAR   B_CRANE_TIMEDELAY_TIMER_DURATION  : UINT  := UINT#12; END_VAR
VAR   B_CRANE_TIMEDELAY_TIMER_INTERCONNECT  : BOOL; END_VAR
VAR   B_CRANE_TIMER1_ET  : UINT; END_VAR
VAR   B_CRANE_TIMER1_IN  : BOOL; END_VAR
VAR   B_CRANE_TIMER1_PT  : UINT; END_VAR
VAR   B_CRANE_TIMER1_Q  : BOOL; END_VAR
VAR   B_CRANE_WORKPIECEREADY  : BOOL; END_VAR
VAR   B_CRANE_2STATE  : CRANE_STATES_T; END_VAR
VAR   B_CRANE_2TRANSIT  : BOOL; END_VAR
VAR   B_CRANE_ACTUALTIME1  : INT; END_VAR
VAR   B_CRANE_INTERCONNECT  : BOOL; END_VAR
VAR   B_CRANE_INTERCONNECTCRANESTARTCOMMAND  : BOOL; END_VAR
VAR   B_MAG_CRANEDOWN  : BOOL; END_VAR
VAR   B_MAG_CRANELOWER  : BOOL; END_VAR
VAR   B_MAG_CRANEONCONVEYOR  : BOOL; END_VAR
VAR   B_MAG_CRANEONMAGAZIN  : BOOL; END_VAR
VAR   B_MAG_CRANESUCKED  : BOOL; END_VAR
VAR   B_MAG_CRANETURNCLOCKWISE  : BOOL; END_VAR
VAR   B_MAG_CRANETURNCOUNTERCLOCKWISE  : BOOL; END_VAR
VAR   B_MAG_CRANEUP  : BOOL; END_VAR
VAR   B_MAG_MAGAZINGREENLAMP  : BOOL; END_VAR
VAR   B_MAG_MAGAZINSLIDER  : BOOL; END_VAR
VAR   B_MAG_MAGAZINVACUUMOFF  : BOOL; END_VAR
VAR   B_MAG_MAGAZINVACUUMON  : BOOL; END_VAR
VAR   B_MAG_MAGAZINWHITELAMP  : BOOL; END_VAR
VAR   B_MAG_SFCINIT  : BOOL; END_VAR
VAR   B_MAG_SFCRESET  : BOOL; END_VAR
VAR   B_MAG_SLIDERMOVEDOUT  : BOOL; END_VAR
VAR   B_MAG_SLIDERNOTMOVEDOUT  : BOOL; END_VAR
VAR   B_MAG_STARTBUTTONMAGAZIN  : BOOL; END_VAR
VAR   B_MAG_STARTCOMMANDMAGAZIN  : BOOL; END_VAR
VAR   B_MAG_STARTVAR  : BOOL; END_VAR
VAR   B_MAG_WORKPIECEREADY  : BOOL; END_VAR
VAR   B_MAG_2STATE  : MAGAZIN_STATES_T; END_VAR
VAR   B_MAG_2TRANSIT  : BOOL; END_VAR
VAR   B_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANEDOWN  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANEONCONVEYOR  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANEONMAGAZIN  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANEPOSITION  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANEPOSITIONSTAMP  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANESUCKED  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_CRANEUP  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_MAGAZINCAPACITIVESENSOR  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_MAGAZINEMERGENCYSTOP  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_MAGAZINOPTICALSENSOR  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_MAGAZINSWITCHMANUELLAUTOMATIC  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_SLIDERMOVEDOUT  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_SLIDERNOTMOVEDOUT  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPEMERGENCYSTOP  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPLOWERED  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPSLIDERFILLED  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPSLIDERSENSORMOVEDIN  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPSLIDERSENSORMOVEDOUT  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPSTARTBUTTON  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPSWITCHMANUELLAUTOMATIC  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STAMPUP  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_STARTBUTTONMAGAZIN  : BOOL; END_VAR
VAR_INPUT   B_SENSOR_WORKPIECEREADY  : BOOL; END_VAR
VAR   B_STAMP_CRANEDOWN  : BOOL; END_VAR
VAR   B_STAMP_CRANEONCONVEYOR  : BOOL; END_VAR
VAR   B_STAMP_CRANEPOSITIONSTAMP  : BOOL; END_VAR
VAR   B_STAMP_CRANESUCKED  : BOOL; END_VAR
VAR   B_STAMP_CRANEUP  : BOOL; END_VAR
VAR   B_STAMP_DURATION  : UINT  := UINT#15; END_VAR
VAR   B_STAMP_SFCINIT  : BOOL; END_VAR
VAR   B_STAMP_SFCRESET  : BOOL; END_VAR
VAR   B_STAMP_STAMPGREENLAMP  : BOOL; END_VAR
VAR   B_STAMP_STAMPLOWERED  : BOOL; END_VAR
VAR   B_STAMP_STAMPPRESSURE  : BOOL; END_VAR
VAR   B_STAMP_STAMPPUSHER  : BOOL; END_VAR
VAR   B_STAMP_STAMPSLIDERFILLED  : BOOL; END_VAR
VAR   B_STAMP_STAMPSLIDERMOVEDIN  : BOOL; END_VAR
VAR   B_STAMP_STAMPSLIDERMOVEDOUT  : BOOL; END_VAR
VAR   B_STAMP_STAMPSLIDERSENSORMOVEDIN  : BOOL; END_VAR
VAR   B_STAMP_STAMPSLIDERSENSORMOVEDOUT  : BOOL; END_VAR
VAR   B_STAMP_STAMPSTARTBUTTON  : BOOL; END_VAR
VAR   B_STAMP_STAMPUP  : BOOL; END_VAR
VAR   B_STAMP_STAMPWHITELAMP  : BOOL; END_VAR
VAR   B_STAMP_STARTCOMMANDSTAMP  : BOOL; END_VAR
VAR   B_STAMP_STARTVAR  : BOOL; END_VAR
VAR   B_STAMP_TIMER_ET  : UINT; END_VAR
VAR   B_STAMP_TIMER_IN  : BOOL; END_VAR
VAR   B_STAMP_TIMER_PT  : UINT; END_VAR
VAR   B_STAMP_TIMER_Q  : BOOL; END_VAR
VAR   B_STAMP_2STATE  : STAMP_STATES_T; END_VAR
VAR   B_STAMP_2TRANSIT  : BOOL; END_VAR
VAR   B_STAMP_INTERCONNECT  : BOOL; END_VAR
VAR   B_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  : BOOL; END_VAR

VAR   B_DIAGNOSIS_ACTIVE  : BOOL; END_VAR
VAR_INPUT  B_PARAMETER_CRANE_PRESSURE  : INT := INT#6000; END_VAR

 
 A_MAG_SLIDERNOTMOVEDOUT  :=  A_SENSOR_SLIDERNOTMOVEDOUT ;
 A_MAG_SLIDERMOVEDOUT  :=  A_SENSOR_SLIDERMOVEDOUT ;
 A_MAG_CRANEONMAGAZIN  :=  A_SENSOR_CRANEONMAGAZIN ;
 A_MAG_CRANEDOWN  :=  A_SENSOR_CRANEDOWN ;
 A_MAG_CRANEUP  :=  A_SENSOR_CRANEUP ;
 A_MAG_CRANEONCONVEYOR  :=  A_SENSOR_CRANEONCONVEYOR ;
 A_MAG_WORKPIECEREADY  :=  A_SENSOR_WORKPIECEREADY ;
 A_MAG_STARTBUTTONMAGAZIN  :=  A_SENSOR_STARTBUTTONMAGAZIN ;
 A_ACTUATOR_MAGAZINSLIDER  :=  A_MAG_MAGAZINSLIDER ;
 A_ACTUATOR_MAGAZINGREENLAMP  :=  A_MAG_MAGAZINGREENLAMP ;
 A_CRANE_CRANEUP  :=  A_SENSOR_CRANEUP ;
 A_CRANE_CRANEONCONVEYOR  :=  A_SENSOR_CRANEONCONVEYOR ;
 A_CRANE_CRANEDOWN  :=  A_SENSOR_CRANEDOWN ;
 A_CRANE_CRANESUCKED  :=  A_SENSOR_CRANESUCKED ;
 A_CRANE_CRANEONMAGAZIN  :=  A_SENSOR_CRANEONMAGAZIN ;
 A_CRANE_MAGAZINCAPACITIVESENSOR  :=  A_SENSOR_MAGAZINCAPACITIVESENSOR ;
 A_CRANE_CRANEPOSITIONSTAMP  :=  A_SENSOR_CRANEPOSITIONSTAMP ;
 A_CRANE_SLIDERMOVEDOUT  :=  A_SENSOR_SLIDERMOVEDOUT ;
 A_CRANE_WORKPIECEREADY  :=  A_SENSOR_WORKPIECEREADY ;
 A_CRANE_STAMPSLIDERFILLED  :=  A_SENSOR_STAMPSLIDERFILLED ;
 A_CRANE_STARTBUTTONMAGAZIN  :=  A_SENSOR_STARTBUTTONMAGAZIN ;
 A_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  :=  A_CRANE_CRANETURNCOUNTERCLOCKWISE ;
 A_ACTUATOR_CRANETURNCLOCKWISE  :=  A_CRANE_CRANETURNCLOCKWISE ;
 A_ACTUATOR_CRANELOWER  :=  A_CRANE_CRANELOWER ;
 A_ACTUATOR_MAGAZINVACUUMOFF  :=  A_CRANE_MAGAZINVACUUMOFF ;
 A_ACTUATOR_MAGAZINVACUUMON  :=  A_CRANE_MAGAZINVACUUMON ;
 A_STAMP_STAMPSLIDERSENSORMOVEDOUT  :=  A_SENSOR_STAMPSLIDERSENSORMOVEDOUT ;
 A_STAMP_STAMPSLIDERSENSORMOVEDIN  :=  A_SENSOR_STAMPSLIDERSENSORMOVEDIN ;
 A_STAMP_STAMPSLIDERFILLED  :=  A_SENSOR_STAMPSLIDERFILLED ;
 A_STAMP_STAMPUP  :=  A_SENSOR_STAMPUP ;
 A_STAMP_STAMPLOWERED  :=  A_SENSOR_STAMPLOWERED ;
 A_STAMP_CRANEDOWN  :=  A_SENSOR_CRANEDOWN ;
 A_STAMP_CRANEUP  :=  A_SENSOR_CRANEUP ;
 A_STAMP_CRANESUCKED  :=  A_SENSOR_CRANESUCKED ;
 A_STAMP_CRANEPOSITIONSTAMP  :=  A_SENSOR_CRANEPOSITIONSTAMP ;
 A_STAMP_CRANEONCONVEYOR  :=  A_SENSOR_CRANEONCONVEYOR ;
 A_STAMP_STAMPSTARTBUTTON  :=  A_SENSOR_STAMPSTARTBUTTON ;
 A_ACTUATOR_STAMPSLIDERMOVEDOUT  :=  A_STAMP_STAMPSLIDERMOVEDOUT ;
 A_ACTUATOR_STAMPSLIDERMOVEDIN  :=  A_STAMP_STAMPSLIDERMOVEDIN ;
 A_ACTUATOR_STAMPWHITELAMP  :=  A_STAMP_STAMPWHITELAMP ;
 A_ACTUATOR_STAMPPUSHER  :=  A_STAMP_STAMPPUSHER ;
 A_ACTUATOR_STAMPGREENLAMP  :=  A_STAMP_STAMPGREENLAMP ;
 A_ACTUATOR_ANALOGCRANEPRESSURE  :=  A_PARAMETER_CRANE_PRESSURE ;

IF  A_DIAGNOSIS_ACTIVE  AND  A_SENSOR_CRANESUCKED  AND
             ( A_ACTUATOR_ANALOGCRANEPRESSURE  <= 0 OR  A_ACTUATOR_ANALOGCRANEPRESSURE  > 10000) THEN
         A_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  := FALSE;
         A_ACTUATOR_CRANETURNCLOCKWISE  := FALSE;
END_IF;



IF ( A_SENSOR_STAMPEMERGENCYSTOP  AND  A_SENSOR_MAGAZINEMERGENCYSTOP ) THEN
    CASE  A_MAG_2STATE  OF
        MAGAZIN_STATES_T#GREEN_LAMP:
             A_MAG_2TRANSIT  := FALSE;
             A_MAG_MAGAZINGREENLAMP  := TRUE;
             A_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  := FALSE;
            IF TRUE THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#MAGAZIN_INIT;
            END_IF;

        MAGAZIN_STATES_T#INIT:
             A_MAG_2TRANSIT  := FALSE;
            IF TRUE THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#START_MAGAZIN;
            END_IF;

        MAGAZIN_STATES_T#INTERSTEP:
             A_MAG_2TRANSIT  := FALSE;
             A_MAG_STARTCOMMANDMAGAZIN  := TRUE;
            IF  A_MAG_STARTVAR  THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#CONVEY;
            END_IF;

        MAGAZIN_STATES_T#MAGAZIN_INIT:
             A_MAG_2TRANSIT  := FALSE;
             A_MAG_MAGAZINSLIDER  := TRUE;
            IF TRUE THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#MAGAZIN_INIT_2;
            END_IF;

        MAGAZIN_STATES_T#MAGAZIN_INIT_2:
             A_MAG_2TRANSIT  := FALSE;
             A_MAG_MAGAZINSLIDER  := FALSE;
            IF TRUE THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#INTERSTEP;
            END_IF;

        MAGAZIN_STATES_T#SLIDER_MOVE_BACK:
             A_MAG_2TRANSIT  := FALSE;
            IF (( A_MAG_SLIDERMOVEDOUT  = TRUE) AND ( A_MAG_SLIDERNOTMOVEDOUT  = FALSE)) THEN
                 A_MAG_MAGAZINSLIDER  := FALSE;
            END_IF;
            IF  A_MAG_CRANEUP  THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#STEP1;
            END_IF;

        MAGAZIN_STATES_T#START_MAGAZIN:
             A_MAG_2TRANSIT  := FALSE;
             A_MAG_MAGAZINSLIDER  := FALSE;
             A_MAG_MAGAZINGREENLAMP  := FALSE;
             A_MAG_STARTVAR  := FALSE;
             A_MAG_STARTCOMMANDMAGAZIN  := FALSE;
            IF ( A_MAG_STARTBUTTONMAGAZIN  = TRUE) THEN
                 A_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  := TRUE;
            END_IF;
            IF  A_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#GREEN_LAMP;
            END_IF;

        MAGAZIN_STATES_T#STEP0:
             A_MAG_2TRANSIT  := FALSE;
            IF  A_MAG_CRANEDOWN  THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#SLIDER_MOVE_BACK;
            END_IF;

        MAGAZIN_STATES_T#STEP1:
             A_MAG_2TRANSIT  := FALSE;
            IF  A_MAG_CRANEONCONVEYOR  THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#INTERSTEP;
            END_IF;

        MAGAZIN_STATES_T#CONVEY:
             A_MAG_2TRANSIT  := FALSE;
            IF  A_MAG_SLIDERNOTMOVEDOUT  THEN
                 A_MAG_MAGAZINSLIDER  := TRUE;
            END_IF;
            IF  A_MAG_CRANEONMAGAZIN  THEN
                 A_MAG_2TRANSIT  := TRUE;
                 A_MAG_2STATE  := MAGAZIN_STATES_T#STEP0;
            END_IF;

            END_CASE;
    CASE  A_CRANE_2STATE  OF
        CRANE_STATES_T#CRANE_GO_UP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF ( A_CRANE_CRANEUP  AND ( A_CRANE_MAGAZINCAPACITIVESENSOR  OR NOT  A_CRANE_WORKPIECEREADY )) THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#PAUSE;
            ELSIF (( A_CRANE_CRANEUP  AND NOT  A_CRANE_MAGAZINCAPACITIVESENSOR ) AND  A_CRANE_WORKPIECEREADY ) THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#TURN_RIGHT_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_INIT:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
             A_CRANE_INTERCONNECTCRANESTARTCOMMAND  := FALSE;
            IF  A_CRANE_CRANEDOWN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_INIT_2;
            END_IF;

        CRANE_STATES_T#CRANE_INIT_2:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF  A_CRANE_CRANEUP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#INTERSTEP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_AT_STAMP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF  A_CRANE_CRANEUP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_FROM_STAMP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_CONVEYOR:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#INTERSTEP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_CONVEYOR_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF  A_CRANE_CRANEUP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_BACK_TO_STAMP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_MAGAZIN:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF  A_CRANE_CRANEUP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_MAGAZIN_METALLIC:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF  A_CRANE_CRANEUP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_NOT_METALLIC_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
            IF  A_CRANE_CRANEUP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_LOWER:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_MAGAZINVACUUMON  := TRUE;
             A_CRANE_MAGAZINVACUUMOFF  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANESUCKED  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#STEP0;
            END_IF;

        CRANE_STATES_T#CRANE_ON_CONVEYOR:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANEDOWN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#RELEASE;
            END_IF;

        CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANEDOWN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#RELEASE;
            END_IF;

        CRANE_STATES_T#CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANEDOWN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#RELEASE_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_ON_STAMP_METALLIC:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANEDOWN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#RELEASE_WORKPIECE;
            END_IF;

        CRANE_STATES_T#CRANE_ON_STAMP_STOP_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#RESET_INTERCONNECT;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_BACK_TO_STAMP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEPOSITIONSTAMP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_STAMP_STOP_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_FROM_STAMP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEONCONVEYOR  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEPOSITIONSTAMP  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_STAMP_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEONCONVEYOR  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_CONVEYOR;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEONCONVEYOR  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK;
            END_IF;

        CRANE_STATES_T#INIT:
             A_CRANE_2TRANSIT  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#START_CRANE;
            END_IF;

        CRANE_STATES_T#INTERSTEP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_STARTCOMMANDCRANE  := TRUE;
            IF  A_CRANE_STARTVAR  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#INTERSTEP_2;
            END_IF;

        CRANE_STATES_T#INTERSTEP_2:
             A_CRANE_2TRANSIT  := FALSE;
            IF  A_CRANE_SLIDERMOVEDOUT  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#TIMEDELAY;
            END_IF;

        CRANE_STATES_T#LAST_WORKPIECE_AT_STAMP:
             A_CRANE_2TRANSIT  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#PAUSE;
            END_IF;

        CRANE_STATES_T#LOWER_CRANE:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANEDOWN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#SUCK_AT_STAMP;
            END_IF;

        CRANE_STATES_T#MAGAZIN_STOP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  A_CRANE_WORKPIECEREADY  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LOWER;
            ELSIF (NOT  A_CRANE_WORKPIECEREADY  AND NOT  A_CRANE_STAMPSLIDERFILLED ) THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#NO_WORKPIECE_READY;
            ELSIF (NOT  A_CRANE_WORKPIECEREADY  AND  A_CRANE_STAMPSLIDERFILLED ) THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#LAST_WORKPIECE_AT_STAMP;
            END_IF;

        CRANE_STATES_T#MAGAZIN_STOP_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             A_CRANE_MAGAZINVACUUMON  := TRUE;
             A_CRANE_MAGAZINVACUUMOFF  := FALSE;
             A_CRANE_CRANELOWER  := TRUE;
            IF  A_CRANE_CRANESUCKED  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_NOT_METALLIC_BLACK;
            END_IF;

        CRANE_STATES_T#NO_WORKPIECE_READY:
             A_CRANE_2TRANSIT  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#START_CRANE;
            END_IF;

        CRANE_STATES_T#RESET_INTERCONNECT:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_INTERCONNECT  := FALSE;
             A_CRANE_TIMER1_IN  := FALSE;
             A_CRANE_TIMER1_PT  := UINT#0;
            IF  A_CRANE_TIMER1_IN  THEN
                 A_CRANE_TIMER1_Q  := ( A_CRANE_TIMER1_ET  = UINT#0);
                IF ( A_CRANE_TIMER1_ET  > UINT#0) THEN
                     A_CRANE_TIMER1_ET  := ( A_CRANE_TIMER1_ET  - UINT#1);
                ELSE
                     A_CRANE_TIMER1_ET  := UINT#0;
                END_IF;
            ELSE
                 A_CRANE_TIMER1_Q  := FALSE;
                 A_CRANE_TIMER1_ET  :=  A_CRANE_TIMER1_PT ;
            END_IF;
            IF  A_CRANE_SLIDERMOVEDOUT  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#LOWER_CRANE;
            END_IF;

        CRANE_STATES_T#START_CRANE:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANELOWER  := FALSE;
             A_CRANE_MAGAZINVACUUMOFF  := TRUE;
             A_CRANE_MAGAZINVACUUMON  := FALSE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := FALSE;
             A_CRANE_STARTVAR  := FALSE;
             A_CRANE_STARTCOMMANDCRANE  := FALSE;
            IF ( A_CRANE_STARTBUTTONMAGAZIN  = TRUE) THEN
                 A_CRANE_INTERCONNECTCRANESTARTCOMMAND  := TRUE;
            END_IF;
            IF  A_CRANE_INTERCONNECTCRANESTARTCOMMAND  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_INIT;
            END_IF;

        CRANE_STATES_T#STEP0:
             A_CRANE_2TRANSIT  := FALSE;
            IF NOT  A_CRANE_MAGAZINCAPACITIVESENSOR  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_MAGAZIN;
            ELSIF  A_CRANE_MAGAZINCAPACITIVESENSOR  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_MAGAZIN_METALLIC;
            END_IF;

        CRANE_STATES_T#SUCK_AT_STAMP:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_MAGAZINVACUUMON  := TRUE;
             A_CRANE_MAGAZINVACUUMOFF  := FALSE;
            IF  A_CRANE_CRANESUCKED  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_AT_STAMP;
            END_IF;

        CRANE_STATES_T#TIMEDELAY:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_TIMEDELAY_TIMER_IN  := TRUE;
             A_CRANE_TIMEDELAY_TIMER_PT  :=  A_CRANE_TIMEDELAY_TIMER_DURATION ;
            IF  A_CRANE_TIMEDELAY_TIMER_IN  THEN
                 A_CRANE_TIMEDELAY_TIMER_Q  := ( A_CRANE_TIMEDELAY_TIMER_ET  = UINT#0);
                IF ( A_CRANE_TIMEDELAY_TIMER_ET  > UINT#0) THEN
                     A_CRANE_TIMEDELAY_TIMER_ET  := ( A_CRANE_TIMEDELAY_TIMER_ET  - UINT#1);
                ELSE
                     A_CRANE_TIMEDELAY_TIMER_ET  := UINT#0;
                END_IF;
            ELSE
                 A_CRANE_TIMEDELAY_TIMER_Q  := FALSE;
                 A_CRANE_TIMEDELAY_TIMER_ET  :=  A_CRANE_TIMEDELAY_TIMER_PT ;
            END_IF;
             A_CRANE_TIMEDELAY_TIMER_INTERCONNECT  :=  A_CRANE_TIMEDELAY_TIMER_Q ;
            IF  A_CRANE_TIMEDELAY_TIMER_INTERCONNECT  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#TURN_RIGHT;
            END_IF;

        CRANE_STATES_T#TURN_RIGHT:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEONMAGAZIN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#MAGAZIN_STOP;
            END_IF;

        CRANE_STATES_T#TURN_RIGHT_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_CRANETURNCLOCKWISE  := TRUE;
             A_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  A_CRANE_CRANEONMAGAZIN  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#MAGAZIN_STOP_BLACK;
            END_IF;

        CRANE_STATES_T#PAUSE:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_TIMER1_IN  :=  A_CRANE_CRANEUP ;
             A_CRANE_TIMER1_PT  :=  A_CRANE_DURATION1 ;
            IF  A_CRANE_TIMER1_IN  THEN
                 A_CRANE_TIMER1_Q  := ( A_CRANE_TIMER1_ET  = UINT#0);
                IF ( A_CRANE_TIMER1_ET  > UINT#0) THEN
                     A_CRANE_TIMER1_ET  := ( A_CRANE_TIMER1_ET  - UINT#1);
                ELSE
                     A_CRANE_TIMER1_ET  := UINT#0;
                END_IF;
            ELSE
                 A_CRANE_TIMER1_Q  := FALSE;
                 A_CRANE_TIMER1_ET  :=  A_CRANE_TIMER1_PT ;
            END_IF;
             A_CRANE_INTERCONNECT  :=  A_CRANE_TIMER1_Q ;
            IF  A_CRANE_INTERCONNECT  THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#RESET_INTERCONNECT;
            END_IF;

        CRANE_STATES_T#RELEASE:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_MAGAZINVACUUMOFF  := TRUE;
             A_CRANE_MAGAZINVACUUMON  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_CONVEYOR;
            END_IF;

        CRANE_STATES_T#RELEASE_BLACK:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_MAGAZINVACUUMON  := FALSE;
             A_CRANE_MAGAZINVACUUMOFF  := TRUE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_CONVEYOR_BLACK;
            END_IF;

        CRANE_STATES_T#RELEASE_WORKPIECE:
             A_CRANE_2TRANSIT  := FALSE;
             A_CRANE_MAGAZINVACUUMOFF  := TRUE;
             A_CRANE_MAGAZINVACUUMON  := FALSE;
            IF TRUE THEN
                 A_CRANE_2TRANSIT  := TRUE;
                 A_CRANE_2STATE  := CRANE_STATES_T#CRANE_GO_UP;
            END_IF;

            END_CASE;
    CASE  A_STAMP_2STATE  OF
        STAMP_STATES_T#GREEN_LAMP:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPGREENLAMP  := TRUE;
             A_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  := FALSE;
            IF TRUE THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_1;
            END_IF;

        STAMP_STATES_T#INIT:
             A_STAMP_2TRANSIT  := FALSE;
            IF TRUE THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#START_STAMP;
            END_IF;

        STAMP_STATES_T#INTERSTEP:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STARTCOMMANDSTAMP  := TRUE;
            IF  A_STAMP_STARTVAR  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#INTERSTEP_2;
            END_IF;

        STAMP_STATES_T#INTERSTEP_2:
             A_STAMP_2TRANSIT  := FALSE;
            IF  A_STAMP_STAMPSLIDERFILLED  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STEP0;
            END_IF;

        STAMP_STATES_T#STAMPPROCESS:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDIN  := FALSE;
             A_STAMP_STAMPPUSHER  := TRUE;
            IF  A_STAMP_STAMPLOWERED  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STEP1;
            END_IF;

        STAMP_STATES_T#STAMPSLIDERBACK:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDIN  := TRUE;
             A_STAMP_STAMPSLIDERMOVEDOUT  := FALSE;
            IF  A_STAMP_STAMPSLIDERSENSORMOVEDIN  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMPPROCESS;
            END_IF;

        STAMP_STATES_T#STAMPSLIDERFORWARD:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPPUSHER  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDOUT  := TRUE;
            IF (( A_STAMP_STAMPLOWERED  = FALSE) AND ( A_STAMP_STAMPUP  = TRUE)) THEN
                 A_STAMP_INTERCONNECT  := FALSE;
            END_IF;
             A_STAMP_TIMER_IN  := FALSE;
             A_STAMP_TIMER_PT  := UINT#0;
            IF  A_STAMP_TIMER_IN  THEN
                 A_STAMP_TIMER_Q  := ( A_STAMP_TIMER_ET  = UINT#0);
                IF ( A_STAMP_TIMER_ET  > UINT#0) THEN
                     A_STAMP_TIMER_ET  := ( A_STAMP_TIMER_ET  - UINT#1);
                ELSE
                     A_STAMP_TIMER_ET  := UINT#0;
                END_IF;
            ELSE
                 A_STAMP_TIMER_Q  := FALSE;
                 A_STAMP_TIMER_ET  :=  A_STAMP_TIMER_PT ;
            END_IF;
            IF  A_STAMP_STAMPSLIDERMOVEDOUT  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STEP2;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_1:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDIN  := TRUE;
             A_STAMP_STAMPSLIDERMOVEDOUT  := FALSE;
            IF  A_STAMP_STAMPSLIDERSENSORMOVEDIN  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_2;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_2:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDIN  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDOUT  := TRUE;
            IF  A_STAMP_STAMPSLIDERSENSORMOVEDOUT  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_3;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_3:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPPUSHER  := TRUE;
            IF  A_STAMP_STAMPLOWERED  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_4;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_4:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPPUSHER  := FALSE;
            IF  A_STAMP_STAMPUP  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#INTERSTEP;
            END_IF;

        STAMP_STATES_T#START_STAMP:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDOUT  := FALSE;
             A_STAMP_STAMPSLIDERMOVEDIN  := FALSE;
             A_STAMP_STAMPPUSHER  := FALSE;
             A_STAMP_STAMPGREENLAMP  := FALSE;
             A_STAMP_STAMPPRESSURE  := FALSE;
             A_STAMP_STARTCOMMANDSTAMP  := FALSE;
            IF ( A_STAMP_STAMPSTARTBUTTON  = TRUE) THEN
                 A_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  := TRUE;
            END_IF;
            IF  A_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#GREEN_LAMP;
            END_IF;

        STAMP_STATES_T#STEP0:
             A_STAMP_2TRANSIT  := FALSE;
            IF  A_STAMP_CRANEUP  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMPSLIDERBACK;
            END_IF;

        STAMP_STATES_T#STEP1:
             A_STAMP_2TRANSIT  := FALSE;
             A_STAMP_TIMER_IN  :=  A_STAMP_STAMPLOWERED ;
             A_STAMP_TIMER_PT  := UINT#0;
            IF  A_STAMP_TIMER_IN  THEN
                 A_STAMP_TIMER_Q  := ( A_STAMP_TIMER_ET  = UINT#0);
                IF ( A_STAMP_TIMER_ET  > UINT#0) THEN
                     A_STAMP_TIMER_ET  := ( A_STAMP_TIMER_ET  - UINT#1);
                ELSE
                     A_STAMP_TIMER_ET  := UINT#0;
                END_IF;
            ELSE
                 A_STAMP_TIMER_Q  := FALSE;
                 A_STAMP_TIMER_ET  :=  A_STAMP_TIMER_PT ;
            END_IF;
             A_STAMP_INTERCONNECT  :=  A_STAMP_TIMER_Q ;
            IF  A_STAMP_INTERCONNECT  THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#STAMPSLIDERFORWARD;
            END_IF;

        STAMP_STATES_T#STEP2:
             A_STAMP_2TRANSIT  := FALSE;
            IF ( A_STAMP_CRANEONCONVEYOR  AND NOT  A_STAMP_STAMPSLIDERFILLED ) THEN
                 A_STAMP_2TRANSIT  := TRUE;
                 A_STAMP_2STATE  := STAMP_STATES_T#INTERSTEP;
            END_IF;

            END_CASE;
    IF ( A_ACTUATOR_MAGAZINGREENLAMP  AND  A_ACTUATOR_STAMPGREENLAMP ) THEN
        IF (( A_STAMP_STARTCOMMANDSTAMP  AND  A_CRANE_STARTCOMMANDCRANE ) AND  A_MAG_STARTCOMMANDMAGAZIN ) THEN
             A_CRANE_STARTVAR  := TRUE;
             A_MAG_STARTVAR  := TRUE;
             A_STAMP_STARTVAR  := TRUE;
             A_DIAGNOSIS_ACTIVE  := TRUE;
        END_IF;
    END_IF;
     A_CRANE_SFCRESET  := FALSE;
     A_MAG_SFCRESET  := FALSE;
     A_STAMP_SFCRESET  := FALSE;
ELSIF (NOT  A_SENSOR_STAMPEMERGENCYSTOP  OR NOT  A_SENSOR_MAGAZINEMERGENCYSTOP ) THEN
     A_ACTUATOR_MAGAZINSLIDER  := FALSE;
     A_ACTUATOR_CRANELOWER  := FALSE;
     A_ACTUATOR_MAGAZINVACUUMON  := FALSE;
     A_ACTUATOR_MAGAZINVACUUMOFF  := TRUE;
     A_ACTUATOR_MAGAZINGREENLAMP  := FALSE;
     A_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  := FALSE;
     A_ACTUATOR_CRANETURNCLOCKWISE  := FALSE;
     A_ACTUATOR_STAMPSLIDERMOVEDOUT  := TRUE;
     A_ACTUATOR_STAMPSLIDERMOVEDIN  := FALSE;
     A_ACTUATOR_STAMPGREENLAMP  := FALSE;
     A_ACTUATOR_STAMPPUSHER  := FALSE;
     A_ACTUATOR_ANALOGCRANEPRESSURE  := INT#0;
     A_CRANE_SFCRESET  := TRUE;
     A_MAG_SFCRESET  := TRUE;
     A_STAMP_SFCRESET  := TRUE;
     A_CRANE_STARTVAR  := FALSE;
     A_MAG_STARTVAR  := FALSE;
     A_STAMP_STARTVAR  := FALSE;
END_IF;


 B_MAG_SLIDERNOTMOVEDOUT  :=  B_SENSOR_SLIDERNOTMOVEDOUT ;
 B_MAG_SLIDERMOVEDOUT  :=  B_SENSOR_SLIDERMOVEDOUT ;
 B_MAG_CRANEONMAGAZIN  :=  B_SENSOR_CRANEONMAGAZIN ;
 B_MAG_CRANEDOWN  :=  B_SENSOR_CRANEDOWN ;
 B_MAG_CRANEUP  :=  B_SENSOR_CRANEUP ;
 B_MAG_CRANEONCONVEYOR  :=  B_SENSOR_CRANEONCONVEYOR ;
 B_MAG_WORKPIECEREADY  :=  B_SENSOR_WORKPIECEREADY ;
 B_MAG_STARTBUTTONMAGAZIN  :=  B_SENSOR_STARTBUTTONMAGAZIN ;
 B_ACTUATOR_MAGAZINSLIDER  :=  B_MAG_MAGAZINSLIDER ;
 B_ACTUATOR_MAGAZINGREENLAMP  :=  B_MAG_MAGAZINGREENLAMP ;
 B_CRANE_CRANEUP  :=  B_SENSOR_CRANEUP ;
 B_CRANE_CRANEONCONVEYOR  :=  B_SENSOR_CRANEONCONVEYOR ;
 B_CRANE_CRANEDOWN  :=  B_SENSOR_CRANEDOWN ;
 B_CRANE_CRANESUCKED  :=  B_SENSOR_CRANESUCKED ;
 B_CRANE_CRANEONMAGAZIN  :=  B_SENSOR_CRANEONMAGAZIN ;
 B_CRANE_MAGAZINCAPACITIVESENSOR  :=  B_SENSOR_MAGAZINCAPACITIVESENSOR ;
 B_CRANE_CRANEPOSITIONSTAMP  :=  B_SENSOR_CRANEPOSITIONSTAMP ;
 B_CRANE_SLIDERMOVEDOUT  :=  B_SENSOR_SLIDERMOVEDOUT ;
 B_CRANE_WORKPIECEREADY  :=  B_SENSOR_WORKPIECEREADY ;
 B_CRANE_STAMPSLIDERFILLED  :=  B_SENSOR_STAMPSLIDERFILLED ;
 B_CRANE_STARTBUTTONMAGAZIN  :=  B_SENSOR_STARTBUTTONMAGAZIN ;
 B_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  :=  B_CRANE_CRANETURNCOUNTERCLOCKWISE ;
 B_ACTUATOR_CRANETURNCLOCKWISE  :=  B_CRANE_CRANETURNCLOCKWISE ;
 B_ACTUATOR_CRANELOWER  :=  B_CRANE_CRANELOWER ;
 B_ACTUATOR_MAGAZINVACUUMOFF  :=  B_CRANE_MAGAZINVACUUMOFF ;
 B_ACTUATOR_MAGAZINVACUUMON  :=  B_CRANE_MAGAZINVACUUMON ;
 B_STAMP_STAMPSLIDERSENSORMOVEDOUT  :=  B_SENSOR_STAMPSLIDERSENSORMOVEDOUT ;
 B_STAMP_STAMPSLIDERSENSORMOVEDIN  :=  B_SENSOR_STAMPSLIDERSENSORMOVEDIN ;
 B_STAMP_STAMPSLIDERFILLED  :=  B_SENSOR_STAMPSLIDERFILLED ;
 B_STAMP_STAMPUP  :=  B_SENSOR_STAMPUP ;
 B_STAMP_STAMPLOWERED  :=  B_SENSOR_STAMPLOWERED ;
 B_STAMP_CRANEDOWN  :=  B_SENSOR_CRANEDOWN ;
 B_STAMP_CRANEUP  :=  B_SENSOR_CRANEUP ;
 B_STAMP_CRANESUCKED  :=  B_SENSOR_CRANESUCKED ;
 B_STAMP_CRANEPOSITIONSTAMP  :=  B_SENSOR_CRANEPOSITIONSTAMP ;
 B_STAMP_CRANEONCONVEYOR  :=  B_SENSOR_CRANEONCONVEYOR ;
 B_STAMP_STAMPSTARTBUTTON  :=  B_SENSOR_STAMPSTARTBUTTON ;
 B_ACTUATOR_STAMPSLIDERMOVEDOUT  :=  B_STAMP_STAMPSLIDERMOVEDOUT ;
 B_ACTUATOR_STAMPSLIDERMOVEDIN  :=  B_STAMP_STAMPSLIDERMOVEDIN ;
 B_ACTUATOR_STAMPWHITELAMP  :=  B_STAMP_STAMPWHITELAMP ;
 B_ACTUATOR_STAMPPUSHER  :=  B_STAMP_STAMPPUSHER ;
 B_ACTUATOR_STAMPGREENLAMP  :=  B_STAMP_STAMPGREENLAMP ;
 B_ACTUATOR_ANALOGCRANEPRESSURE  :=  B_PARAMETER_CRANE_PRESSURE ;

IF  B_DIAGNOSIS_ACTIVE  AND  B_SENSOR_CRANESUCKED  AND
             ( B_ACTUATOR_ANALOGCRANEPRESSURE  <= 0 OR  B_ACTUATOR_ANALOGCRANEPRESSURE  > 10000) THEN
         B_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  := FALSE;
         B_ACTUATOR_CRANETURNCLOCKWISE  := FALSE;
END_IF;



IF ( B_SENSOR_STAMPEMERGENCYSTOP  AND  B_SENSOR_MAGAZINEMERGENCYSTOP ) THEN
    CASE  B_MAG_2STATE  OF
        MAGAZIN_STATES_T#GREEN_LAMP:
             B_MAG_2TRANSIT  := FALSE;
             B_MAG_MAGAZINGREENLAMP  := TRUE;
             B_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  := FALSE;
            IF TRUE THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#MAGAZIN_INIT;
            END_IF;

        MAGAZIN_STATES_T#INIT:
             B_MAG_2TRANSIT  := FALSE;
            IF TRUE THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#START_MAGAZIN;
            END_IF;

        MAGAZIN_STATES_T#INTERSTEP:
             B_MAG_2TRANSIT  := FALSE;
             B_MAG_STARTCOMMANDMAGAZIN  := TRUE;
            IF  B_MAG_STARTVAR  THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#CONVEY;
            END_IF;

        MAGAZIN_STATES_T#MAGAZIN_INIT:
             B_MAG_2TRANSIT  := FALSE;
             B_MAG_MAGAZINSLIDER  := TRUE;
            IF TRUE THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#MAGAZIN_INIT_2;
            END_IF;

        MAGAZIN_STATES_T#MAGAZIN_INIT_2:
             B_MAG_2TRANSIT  := FALSE;
             B_MAG_MAGAZINSLIDER  := FALSE;
            IF TRUE THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#INTERSTEP;
            END_IF;

        MAGAZIN_STATES_T#SLIDER_MOVE_BACK:
             B_MAG_2TRANSIT  := FALSE;
            IF (( B_MAG_SLIDERMOVEDOUT  = TRUE) AND ( B_MAG_SLIDERNOTMOVEDOUT  = FALSE)) THEN
                 B_MAG_MAGAZINSLIDER  := FALSE;
            END_IF;
            IF  B_MAG_CRANEUP  THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#STEP1;
            END_IF;

        MAGAZIN_STATES_T#START_MAGAZIN:
             B_MAG_2TRANSIT  := FALSE;
             B_MAG_MAGAZINSLIDER  := FALSE;
             B_MAG_MAGAZINGREENLAMP  := FALSE;
             B_MAG_STARTVAR  := FALSE;
             B_MAG_STARTCOMMANDMAGAZIN  := FALSE;
            IF ( B_MAG_STARTBUTTONMAGAZIN  = TRUE) THEN
                 B_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  := TRUE;
            END_IF;
            IF  B_MAG_INTERCONNECTMAGAZINSTARTCOMMAND  THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#GREEN_LAMP;
            END_IF;

        MAGAZIN_STATES_T#STEP0:
             B_MAG_2TRANSIT  := FALSE;
            IF  B_MAG_CRANEDOWN  THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#SLIDER_MOVE_BACK;
            END_IF;

        MAGAZIN_STATES_T#STEP1:
             B_MAG_2TRANSIT  := FALSE;
            IF  B_MAG_CRANEONCONVEYOR  THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#INTERSTEP;
            END_IF;

        MAGAZIN_STATES_T#CONVEY:
             B_MAG_2TRANSIT  := FALSE;
            IF  B_MAG_SLIDERNOTMOVEDOUT  THEN
                 B_MAG_MAGAZINSLIDER  := TRUE;
            END_IF;
            IF  B_MAG_CRANEONMAGAZIN  THEN
                 B_MAG_2TRANSIT  := TRUE;
                 B_MAG_2STATE  := MAGAZIN_STATES_T#STEP0;
            END_IF;

            END_CASE;
    CASE  B_CRANE_2STATE  OF
        CRANE_STATES_T#CRANE_GO_UP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF ( B_CRANE_CRANEUP  AND ( B_CRANE_MAGAZINCAPACITIVESENSOR  OR NOT  B_CRANE_WORKPIECEREADY )) THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#PAUSE;
            ELSIF (( B_CRANE_CRANEUP  AND NOT  B_CRANE_MAGAZINCAPACITIVESENSOR ) AND  B_CRANE_WORKPIECEREADY ) THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#TURN_RIGHT_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_INIT:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
             B_CRANE_INTERCONNECTCRANESTARTCOMMAND  := FALSE;
            IF  B_CRANE_CRANEDOWN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_INIT_2;
            END_IF;

        CRANE_STATES_T#CRANE_INIT_2:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF  B_CRANE_CRANEUP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#INTERSTEP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_AT_STAMP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF  B_CRANE_CRANEUP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_FROM_STAMP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_CONVEYOR:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#INTERSTEP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_CONVEYOR_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF  B_CRANE_CRANEUP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_BACK_TO_STAMP;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_MAGAZIN:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF  B_CRANE_CRANEUP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_MAGAZIN_METALLIC:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF  B_CRANE_CRANEUP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_LIFT_NOT_METALLIC_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
            IF  B_CRANE_CRANEUP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_LOWER:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_MAGAZINVACUUMON  := TRUE;
             B_CRANE_MAGAZINVACUUMOFF  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANESUCKED  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#STEP0;
            END_IF;

        CRANE_STATES_T#CRANE_ON_CONVEYOR:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANEDOWN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#RELEASE;
            END_IF;

        CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANEDOWN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#RELEASE;
            END_IF;

        CRANE_STATES_T#CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANEDOWN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#RELEASE_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_ON_STAMP_METALLIC:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANEDOWN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#RELEASE_WORKPIECE;
            END_IF;

        CRANE_STATES_T#CRANE_ON_STAMP_STOP_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#RESET_INTERCONNECT;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_BACK_TO_STAMP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEPOSITIONSTAMP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_STAMP_STOP_BLACK;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_FROM_STAMP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEONCONVEYOR  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEPOSITIONSTAMP  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_STAMP_METALLIC;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEONCONVEYOR  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_CONVEYOR;
            END_IF;

        CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEONCONVEYOR  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK;
            END_IF;

        CRANE_STATES_T#INIT:
             B_CRANE_2TRANSIT  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#START_CRANE;
            END_IF;

        CRANE_STATES_T#INTERSTEP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_STARTCOMMANDCRANE  := TRUE;
            IF  B_CRANE_STARTVAR  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#INTERSTEP_2;
            END_IF;

        CRANE_STATES_T#INTERSTEP_2:
             B_CRANE_2TRANSIT  := FALSE;
            IF  B_CRANE_SLIDERMOVEDOUT  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#TIMEDELAY;
            END_IF;

        CRANE_STATES_T#LAST_WORKPIECE_AT_STAMP:
             B_CRANE_2TRANSIT  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#PAUSE;
            END_IF;

        CRANE_STATES_T#LOWER_CRANE:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANEDOWN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#SUCK_AT_STAMP;
            END_IF;

        CRANE_STATES_T#MAGAZIN_STOP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  B_CRANE_WORKPIECEREADY  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LOWER;
            ELSIF (NOT  B_CRANE_WORKPIECEREADY  AND NOT  B_CRANE_STAMPSLIDERFILLED ) THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#NO_WORKPIECE_READY;
            ELSIF (NOT  B_CRANE_WORKPIECEREADY  AND  B_CRANE_STAMPSLIDERFILLED ) THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#LAST_WORKPIECE_AT_STAMP;
            END_IF;

        CRANE_STATES_T#MAGAZIN_STOP_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             B_CRANE_MAGAZINVACUUMON  := TRUE;
             B_CRANE_MAGAZINVACUUMOFF  := FALSE;
             B_CRANE_CRANELOWER  := TRUE;
            IF  B_CRANE_CRANESUCKED  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_NOT_METALLIC_BLACK;
            END_IF;

        CRANE_STATES_T#NO_WORKPIECE_READY:
             B_CRANE_2TRANSIT  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#START_CRANE;
            END_IF;

        CRANE_STATES_T#RESET_INTERCONNECT:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_INTERCONNECT  := FALSE;
             B_CRANE_TIMER1_IN  := FALSE;
             B_CRANE_TIMER1_PT  := UINT#0;
            IF  B_CRANE_TIMER1_IN  THEN
                 B_CRANE_TIMER1_Q  := ( B_CRANE_TIMER1_ET  = UINT#0);
                IF ( B_CRANE_TIMER1_ET  > UINT#0) THEN
                     B_CRANE_TIMER1_ET  := ( B_CRANE_TIMER1_ET  - UINT#1);
                ELSE
                     B_CRANE_TIMER1_ET  := UINT#0;
                END_IF;
            ELSE
                 B_CRANE_TIMER1_Q  := FALSE;
                 B_CRANE_TIMER1_ET  :=  B_CRANE_TIMER1_PT ;
            END_IF;
            IF  B_CRANE_SLIDERMOVEDOUT  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#LOWER_CRANE;
            END_IF;

        CRANE_STATES_T#START_CRANE:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANELOWER  := FALSE;
             B_CRANE_MAGAZINVACUUMOFF  := TRUE;
             B_CRANE_MAGAZINVACUUMON  := FALSE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := FALSE;
             B_CRANE_STARTVAR  := FALSE;
             B_CRANE_STARTCOMMANDCRANE  := FALSE;
            IF ( B_CRANE_STARTBUTTONMAGAZIN  = TRUE) THEN
                 B_CRANE_INTERCONNECTCRANESTARTCOMMAND  := TRUE;
            END_IF;
            IF  B_CRANE_INTERCONNECTCRANESTARTCOMMAND  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_INIT;
            END_IF;

        CRANE_STATES_T#STEP0:
             B_CRANE_2TRANSIT  := FALSE;
            IF NOT  B_CRANE_MAGAZINCAPACITIVESENSOR  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_MAGAZIN;
            ELSIF  B_CRANE_MAGAZINCAPACITIVESENSOR  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_MAGAZIN_METALLIC;
            END_IF;

        CRANE_STATES_T#SUCK_AT_STAMP:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_MAGAZINVACUUMON  := TRUE;
             B_CRANE_MAGAZINVACUUMOFF  := FALSE;
            IF  B_CRANE_CRANESUCKED  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_AT_STAMP;
            END_IF;

        CRANE_STATES_T#TIMEDELAY:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_TIMEDELAY_TIMER_IN  := TRUE;
             B_CRANE_TIMEDELAY_TIMER_PT  :=  B_CRANE_TIMEDELAY_TIMER_DURATION ;
            IF  B_CRANE_TIMEDELAY_TIMER_IN  THEN
                 B_CRANE_TIMEDELAY_TIMER_Q  := ( B_CRANE_TIMEDELAY_TIMER_ET  = UINT#0);
                IF ( B_CRANE_TIMEDELAY_TIMER_ET  > UINT#0) THEN
                     B_CRANE_TIMEDELAY_TIMER_ET  := ( B_CRANE_TIMEDELAY_TIMER_ET  - UINT#1);
                ELSE
                     B_CRANE_TIMEDELAY_TIMER_ET  := UINT#0;
                END_IF;
            ELSE
                 B_CRANE_TIMEDELAY_TIMER_Q  := FALSE;
                 B_CRANE_TIMEDELAY_TIMER_ET  :=  B_CRANE_TIMEDELAY_TIMER_PT ;
            END_IF;
             B_CRANE_TIMEDELAY_TIMER_INTERCONNECT  :=  B_CRANE_TIMEDELAY_TIMER_Q ;
            IF  B_CRANE_TIMEDELAY_TIMER_INTERCONNECT  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#TURN_RIGHT;
            END_IF;

        CRANE_STATES_T#TURN_RIGHT:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEONMAGAZIN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#MAGAZIN_STOP;
            END_IF;

        CRANE_STATES_T#TURN_RIGHT_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_CRANETURNCLOCKWISE  := TRUE;
             B_CRANE_CRANETURNCOUNTERCLOCKWISE  := FALSE;
            IF  B_CRANE_CRANEONMAGAZIN  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#MAGAZIN_STOP_BLACK;
            END_IF;

        CRANE_STATES_T#PAUSE:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_TIMER1_IN  :=  B_CRANE_CRANEUP ;
             B_CRANE_TIMER1_PT  :=  B_CRANE_DURATION1 ;
            IF  B_CRANE_TIMER1_IN  THEN
                 B_CRANE_TIMER1_Q  := ( B_CRANE_TIMER1_ET  = UINT#0);
                IF ( B_CRANE_TIMER1_ET  > UINT#0) THEN
                     B_CRANE_TIMER1_ET  := ( B_CRANE_TIMER1_ET  - UINT#1);
                ELSE
                     B_CRANE_TIMER1_ET  := UINT#0;
                END_IF;
            ELSE
                 B_CRANE_TIMER1_Q  := FALSE;
                 B_CRANE_TIMER1_ET  :=  B_CRANE_TIMER1_PT ;
            END_IF;
             B_CRANE_INTERCONNECT  :=  B_CRANE_TIMER1_Q ;
            IF  B_CRANE_INTERCONNECT  THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#RESET_INTERCONNECT;
            END_IF;

        CRANE_STATES_T#RELEASE:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_MAGAZINVACUUMOFF  := TRUE;
             B_CRANE_MAGAZINVACUUMON  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_CONVEYOR;
            END_IF;

        CRANE_STATES_T#RELEASE_BLACK:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_MAGAZINVACUUMON  := FALSE;
             B_CRANE_MAGAZINVACUUMOFF  := TRUE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_LIFT_CONVEYOR_BLACK;
            END_IF;

        CRANE_STATES_T#RELEASE_WORKPIECE:
             B_CRANE_2TRANSIT  := FALSE;
             B_CRANE_MAGAZINVACUUMOFF  := TRUE;
             B_CRANE_MAGAZINVACUUMON  := FALSE;
            IF TRUE THEN
                 B_CRANE_2TRANSIT  := TRUE;
                 B_CRANE_2STATE  := CRANE_STATES_T#CRANE_GO_UP;
            END_IF;

            END_CASE;
    CASE  B_STAMP_2STATE  OF
        STAMP_STATES_T#GREEN_LAMP:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPGREENLAMP  := TRUE;
             B_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  := FALSE;
            IF TRUE THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_1;
            END_IF;

        STAMP_STATES_T#INIT:
             B_STAMP_2TRANSIT  := FALSE;
            IF TRUE THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#START_STAMP;
            END_IF;

        STAMP_STATES_T#INTERSTEP:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STARTCOMMANDSTAMP  := TRUE;
            IF  B_STAMP_STARTVAR  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#INTERSTEP_2;
            END_IF;

        STAMP_STATES_T#INTERSTEP_2:
             B_STAMP_2TRANSIT  := FALSE;
            IF  B_STAMP_STAMPSLIDERFILLED  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STEP0;
            END_IF;

        STAMP_STATES_T#STAMPPROCESS:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDIN  := FALSE;
             B_STAMP_STAMPPUSHER  := TRUE;
            IF  B_STAMP_STAMPLOWERED  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STEP1;
            END_IF;

        STAMP_STATES_T#STAMPSLIDERBACK:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDIN  := TRUE;
             B_STAMP_STAMPSLIDERMOVEDOUT  := FALSE;
            IF  B_STAMP_STAMPSLIDERSENSORMOVEDIN  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMPPROCESS;
            END_IF;

        STAMP_STATES_T#STAMPSLIDERFORWARD:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPPUSHER  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDOUT  := TRUE;
            IF (( B_STAMP_STAMPLOWERED  = FALSE) AND ( B_STAMP_STAMPUP  = TRUE)) THEN
                 B_STAMP_INTERCONNECT  := FALSE;
            END_IF;
             B_STAMP_TIMER_IN  := FALSE;
             B_STAMP_TIMER_PT  := UINT#0;
            IF  B_STAMP_TIMER_IN  THEN
                 B_STAMP_TIMER_Q  := ( B_STAMP_TIMER_ET  = UINT#0);
                IF ( B_STAMP_TIMER_ET  > UINT#0) THEN
                     B_STAMP_TIMER_ET  := ( B_STAMP_TIMER_ET  - UINT#1);
                ELSE
                     B_STAMP_TIMER_ET  := UINT#0;
                END_IF;
            ELSE
                 B_STAMP_TIMER_Q  := FALSE;
                 B_STAMP_TIMER_ET  :=  B_STAMP_TIMER_PT ;
            END_IF;
            IF  B_STAMP_STAMPSLIDERMOVEDOUT  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STEP2;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_1:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDIN  := TRUE;
             B_STAMP_STAMPSLIDERMOVEDOUT  := FALSE;
            IF  B_STAMP_STAMPSLIDERSENSORMOVEDIN  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_2;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_2:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDIN  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDOUT  := TRUE;
            IF  B_STAMP_STAMPSLIDERSENSORMOVEDOUT  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_3;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_3:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPPUSHER  := TRUE;
            IF  B_STAMP_STAMPLOWERED  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMP_INIT_4;
            END_IF;

        STAMP_STATES_T#STAMP_INIT_4:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPPUSHER  := FALSE;
            IF  B_STAMP_STAMPUP  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#INTERSTEP;
            END_IF;

        STAMP_STATES_T#START_STAMP:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDOUT  := FALSE;
             B_STAMP_STAMPSLIDERMOVEDIN  := FALSE;
             B_STAMP_STAMPPUSHER  := FALSE;
             B_STAMP_STAMPGREENLAMP  := FALSE;
             B_STAMP_STAMPPRESSURE  := FALSE;
             B_STAMP_STARTCOMMANDSTAMP  := FALSE;
            IF ( B_STAMP_STAMPSTARTBUTTON  = TRUE) THEN
                 B_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  := TRUE;
            END_IF;
            IF  B_STAMP_INTERCONNECTSTAMPSTARTCOMMAND  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#GREEN_LAMP;
            END_IF;

        STAMP_STATES_T#STEP0:
             B_STAMP_2TRANSIT  := FALSE;
            IF  B_STAMP_CRANEUP  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMPSLIDERBACK;
            END_IF;

        STAMP_STATES_T#STEP1:
             B_STAMP_2TRANSIT  := FALSE;
             B_STAMP_TIMER_IN  :=  B_STAMP_STAMPLOWERED ;
             B_STAMP_TIMER_PT  := UINT#0;
            IF  B_STAMP_TIMER_IN  THEN
                 B_STAMP_TIMER_Q  := ( B_STAMP_TIMER_ET  = UINT#0);
                IF ( B_STAMP_TIMER_ET  > UINT#0) THEN
                     B_STAMP_TIMER_ET  := ( B_STAMP_TIMER_ET  - UINT#1);
                ELSE
                     B_STAMP_TIMER_ET  := UINT#0;
                END_IF;
            ELSE
                 B_STAMP_TIMER_Q  := FALSE;
                 B_STAMP_TIMER_ET  :=  B_STAMP_TIMER_PT ;
            END_IF;
             B_STAMP_INTERCONNECT  :=  B_STAMP_TIMER_Q ;
            IF  B_STAMP_INTERCONNECT  THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#STAMPSLIDERFORWARD;
            END_IF;

        STAMP_STATES_T#STEP2:
             B_STAMP_2TRANSIT  := FALSE;
            IF ( B_STAMP_CRANEONCONVEYOR  AND NOT  B_STAMP_STAMPSLIDERFILLED ) THEN
                 B_STAMP_2TRANSIT  := TRUE;
                 B_STAMP_2STATE  := STAMP_STATES_T#INTERSTEP;
            END_IF;

            END_CASE;
    IF ( B_ACTUATOR_MAGAZINGREENLAMP  AND  B_ACTUATOR_STAMPGREENLAMP ) THEN
        IF (( B_STAMP_STARTCOMMANDSTAMP  AND  B_CRANE_STARTCOMMANDCRANE ) AND  B_MAG_STARTCOMMANDMAGAZIN ) THEN
             B_CRANE_STARTVAR  := TRUE;
             B_MAG_STARTVAR  := TRUE;
             B_STAMP_STARTVAR  := TRUE;
             B_DIAGNOSIS_ACTIVE  := TRUE;
        END_IF;
    END_IF;
     B_CRANE_SFCRESET  := FALSE;
     B_MAG_SFCRESET  := FALSE;
     B_STAMP_SFCRESET  := FALSE;
ELSIF (NOT  B_SENSOR_STAMPEMERGENCYSTOP  OR NOT  B_SENSOR_MAGAZINEMERGENCYSTOP ) THEN
     B_ACTUATOR_MAGAZINSLIDER  := FALSE;
     B_ACTUATOR_CRANELOWER  := FALSE;
     B_ACTUATOR_MAGAZINVACUUMON  := FALSE;
     B_ACTUATOR_MAGAZINVACUUMOFF  := TRUE;
     B_ACTUATOR_MAGAZINGREENLAMP  := FALSE;
     B_ACTUATOR_CRANETURNCOUNTERCLOCKWISE  := FALSE;
     B_ACTUATOR_CRANETURNCLOCKWISE  := FALSE;
     B_ACTUATOR_STAMPSLIDERMOVEDOUT  := TRUE;
     B_ACTUATOR_STAMPSLIDERMOVEDIN  := FALSE;
     B_ACTUATOR_STAMPGREENLAMP  := FALSE;
     B_ACTUATOR_STAMPPUSHER  := FALSE;
     B_ACTUATOR_ANALOGCRANEPRESSURE  := INT#0;
     B_CRANE_SFCRESET  := TRUE;
     B_MAG_SFCRESET  := TRUE;
     B_STAMP_SFCRESET  := TRUE;
     B_CRANE_STARTVAR  := FALSE;
     B_MAG_STARTVAR  := FALSE;
     B_STAMP_STARTVAR  := FALSE;
END_IF;

 
END_PROGRAM


CONFIGURATION Config0
  RESOURCE Res0 ON PLC
    TASK TASK0(INTERVAL := T#50MS, PRIORITY := 0);
    PROGRAM INSTANCE0 WITH TASK0 : PRODUCT;
  END_RESOURCE
END_CONFIGURATION
