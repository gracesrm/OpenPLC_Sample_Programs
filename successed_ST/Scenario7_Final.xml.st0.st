TYPE
    MAGAZIN_STATES_T : (GREEN_LAMP , INIT , INTERSTEP , MAGAZIN_INIT , MAGAZIN_INIT_2 , SLIDER_MOVE_BACK , START_MAGAZIN , STEP0 , STEP1 , CONVEY);
    STAMP_STATES_T : (GREEN_LAMP , INIT , INTERSTEP , INTERSTEP_2 , STAMPPROCESS , STAMPSLIDERBACK , STAMPSLIDERFORWARD , STAMP_INIT_1 , STAMP_INIT_2 , STAMP_INIT_3 , STAMP_INIT_4 , START_STAMP , STEP0 , STEP1 , STEP2);
    CRANE_STATES_T : (CRANE_GO_UP , CRANE_INIT , CRANE_INIT_2 , CRANE_LIFT_AT_STAMP , CRANE_LIFT_AT_STAMP2 , CRANE_LIFT_CONVEYOR , CRANE_LIFT_CONVEYOR2 , CRANE_LIFT_CONVEYOR_BLACK , CRANE_LIFT_MAGAZIN , CRANE_LIFT_MAGAZIN_METALLIC , CRANE_LIFT_NOT_METALLIC_BLACK , CRANE_LOWER , CRANE_ON_CONVEYOR , CRANE_ON_CONVEYOR_METALLIC , CRANE_ON_CONVEYOR_METALLIC2 , CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK , CRANE_ON_STAMP_METALLIC , CRANE_ON_STAMP_METALLIC2 , CRANE_ON_STAMP_METALLIC2_LOWER , CRANE_ON_STAMP_STOP_BLACK , CRANE_TURN_LEFT_BACK_TO_STAMP , CRANE_TURN_LEFT_FROM_STAMP , CRANE_TURN_LEFT_METALLIC , CRANE_TURN_LEFT_METALLIC2 , CRANE_TURN_LEFT_NOT_METALLIC , CRANE_TURN_LEFT_NOT_METALLIC_BLACK , CRANE_TURN_RIGHT_FROM_STAMP , INIT , INTERSTEP , INTERSTEP_2 , INTERSTEP_3 , INTERSTEP_4 , LOWER_CRANE , MAGAZIN_STOP , MAGAZIN_STOP_BLACK , MAGAZIN_STOP_FINAL , NO_WORKPIECE_READY , RESET_INTERCONNECT , START_CRANE , STEP0 , STEP2 , STEP3 , STEP4 , SUCK_AT_STAMP , SUCK_AT_STAMP2 , TIMEDELAY , TURN_RIGHT , TURN_RIGHT_BLACK , TURN_RIGHT_FINAL , PAUSE , RELEASE , RELEASE2 , RELEASE_BLACK , RELEASE_WORKPIECE);
END_TYPE

PROGRAM MAIN

VAR  ACTUATOR_ANALOGCRANEPRESSURE : INT; END_VAR 
VAR  ACTUATOR_CRANELOWER : BOOL; END_VAR 
VAR  ACTUATOR_CRANETURNCLOCKWISE : BOOL; END_VAR 
VAR  ACTUATOR_CRANETURNCOUNTERCLOCKWISE : BOOL; END_VAR 
VAR  ACTUATOR_MAGAZINGREENLAMP : BOOL; END_VAR 
VAR  ACTUATOR_MAGAZINSLIDER : BOOL; END_VAR 
VAR  ACTUATOR_MAGAZINVACUUMOFF : BOOL; END_VAR 
VAR  ACTUATOR_MAGAZINVACUUMON : BOOL; END_VAR 
VAR  ACTUATOR_MAGAZINWHITELAMP : BOOL; END_VAR 
VAR  ACTUATOR_STAMPGREENLAMP : BOOL; END_VAR 
VAR  ACTUATOR_STAMPPUSHER : BOOL; END_VAR 
VAR  ACTUATOR_STAMPSLIDERMOVEDIN : BOOL; END_VAR 
VAR  ACTUATOR_STAMPSLIDERMOVEDOUT : BOOL; END_VAR 
VAR  ACTUATOR_STAMPWHITELAMP : BOOL; END_VAR 
VAR_INPUT  CRANE_CRANEDOWN : BOOL; END_VAR 
VAR_OUTPUT  CRANE_CRANELOWER : BOOL; END_VAR 
VAR_INPUT  CRANE_CRANEONCONVEYOR : BOOL; END_VAR 
VAR_INPUT  CRANE_CRANEONMAGAZIN : BOOL; END_VAR 
VAR_INPUT  CRANE_CRANEPOSITIONSTAMP : BOOL; END_VAR 
VAR_INPUT  CRANE_CRANESUCKED : BOOL; END_VAR 
VAR_OUTPUT  CRANE_CRANETURNCLOCKWISE : BOOL; END_VAR 
VAR_OUTPUT  CRANE_CRANETURNCOUNTERCLOCKWISE : BOOL; END_VAR 
VAR_INPUT  CRANE_CRANEUP : BOOL; END_VAR 
VAR  CRANE_DURATION1 : UINT := UINT#375; END_VAR 
VAR_INPUT  CRANE_MAGAZINCAPACITIVESENSOR : BOOL; END_VAR 
VAR_INPUT  CRANE_MAGAZINOPTICALSENSOR : BOOL; END_VAR 
VAR_OUTPUT  CRANE_MAGAZINVACUUMOFF : BOOL; END_VAR 
VAR_OUTPUT  CRANE_MAGAZINVACUUMON : BOOL; END_VAR 
VAR  CRANE_SFCINIT : BOOL; END_VAR 
VAR_INPUT  CRANE_SFCRESET : BOOL; END_VAR 
VAR_INPUT  CRANE_SLIDERMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  CRANE_SLIDERNOTMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  CRANE_STAMPLOWERED : BOOL; END_VAR 
VAR_INPUT  CRANE_STAMPSLIDERFILLED : BOOL; END_VAR 
VAR_INPUT  CRANE_STAMPSLIDERSENSORMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  CRANE_STARTBUTTONMAGAZIN : BOOL; END_VAR 
VAR_OUTPUT  CRANE_STARTCOMMANDCRANE : BOOL; END_VAR 
VAR_INPUT  CRANE_STARTVAR : BOOL; END_VAR 
VAR_OUTPUT  CRANE_TIMEDELAY_TIMER_ET : UINT; END_VAR 
VAR_INPUT  CRANE_TIMEDELAY_TIMER_IN : BOOL; END_VAR 
VAR_INPUT  CRANE_TIMEDELAY_TIMER_PT : UINT; END_VAR 
VAR_OUTPUT  CRANE_TIMEDELAY_TIMER_Q : BOOL; END_VAR 
VAR  CRANE_TIMEDELAY_TIMER_DURATION : UINT := UINT#12; END_VAR 
VAR  CRANE_TIMEDELAY_TIMER_INTERCONNECT : BOOL; END_VAR 
VAR_OUTPUT  CRANE_TIMER1_ET : UINT; END_VAR 
VAR_INPUT  CRANE_TIMER1_IN : BOOL; END_VAR 
VAR_INPUT  CRANE_TIMER1_PT : UINT; END_VAR 
VAR_OUTPUT  CRANE_TIMER1_Q : BOOL; END_VAR 
VAR_INPUT  CRANE_WORKPIECEREADY : BOOL; END_VAR 
VAR  CRANE_2STATE : CRANE_STATES_T; END_VAR 
VAR  CRANE_2TRANSIT : BOOL; END_VAR 
VAR  CRANE_ACTUALTIME1 : INT; END_VAR 
VAR  CRANE_INTERCONNECT : BOOL; END_VAR 
VAR  CRANE_INTERCONNECTCRANESTARTCOMMAND : BOOL; END_VAR 
VAR_INPUT  MAG_CRANEDOWN : BOOL; END_VAR 
VAR_OUTPUT  MAG_CRANELOWER : BOOL; END_VAR 
VAR_INPUT  MAG_CRANEONCONVEYOR : BOOL; END_VAR 
VAR_INPUT  MAG_CRANEONMAGAZIN : BOOL; END_VAR 
VAR_INPUT  MAG_CRANESUCKED : BOOL; END_VAR 
VAR_OUTPUT  MAG_CRANETURNCLOCKWISE : BOOL; END_VAR 
VAR_OUTPUT  MAG_CRANETURNCOUNTERCLOCKWISE : BOOL; END_VAR 
VAR_INPUT  MAG_CRANEUP : BOOL; END_VAR 
VAR_OUTPUT  MAG_MAGAZINGREENLAMP : BOOL; END_VAR 
VAR_OUTPUT  MAG_MAGAZINSLIDER : BOOL; END_VAR 
VAR_OUTPUT  MAG_MAGAZINVACUUMOFF : BOOL; END_VAR 
VAR_OUTPUT  MAG_MAGAZINVACUUMON : BOOL; END_VAR 
VAR_OUTPUT  MAG_MAGAZINWHITELAMP : BOOL; END_VAR 
VAR  MAG_SFCINIT : BOOL; END_VAR 
VAR_INPUT  MAG_SFCRESET : BOOL; END_VAR 
VAR_INPUT  MAG_SLIDERMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  MAG_SLIDERNOTMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  MAG_STARTBUTTONMAGAZIN : BOOL; END_VAR 
VAR_OUTPUT  MAG_STARTCOMMANDMAGAZIN : BOOL; END_VAR 
VAR_INPUT  MAG_STARTVAR : BOOL; END_VAR 
VAR_INPUT  MAG_WORKPIECEREADY : BOOL; END_VAR 
VAR  MAG_2STATE : MAGAZIN_STATES_T; END_VAR 
VAR  MAG_2TRANSIT : BOOL; END_VAR 
VAR  MAG_INTERCONNECTMAGAZINSTARTCOMMAND : BOOL; END_VAR 
VAR  SENSOR_CRANEDOWN : BOOL; END_VAR 
VAR  SENSOR_CRANEONCONVEYOR : BOOL; END_VAR 
VAR  SENSOR_CRANEONMAGAZIN : BOOL; END_VAR 
VAR  SENSOR_CRANEPOSITION : BOOL; END_VAR 
VAR  SENSOR_CRANEPOSITIONSTAMP : BOOL; END_VAR 
VAR  SENSOR_CRANESUCKED : BOOL; END_VAR 
VAR  SENSOR_CRANEUP : BOOL; END_VAR 
VAR  SENSOR_MAGAZINCAPACITIVESENSOR : BOOL; END_VAR 
VAR  SENSOR_MAGAZINEMERGENCYSTOP : BOOL; END_VAR 
VAR  SENSOR_MAGAZINOPTICALSENSOR : BOOL; END_VAR 
VAR  SENSOR_MAGAZINSWITCHMANUELLAUTOMATIC : BOOL; END_VAR 
VAR  SENSOR_SLIDERMOVEDOUT : BOOL; END_VAR 
VAR  SENSOR_SLIDERNOTMOVEDOUT : BOOL; END_VAR 
VAR  SENSOR_STAMPEMERGENCYSTOP : BOOL; END_VAR 
VAR  SENSOR_STAMPLOWERED : BOOL; END_VAR 
VAR  SENSOR_STAMPSLIDERFILLED : BOOL; END_VAR 
VAR  SENSOR_STAMPSLIDERSENSORMOVEDIN : BOOL; END_VAR 
VAR  SENSOR_STAMPSLIDERSENSORMOVEDOUT : BOOL; END_VAR 
VAR  SENSOR_STAMPSTARTBUTTON : BOOL; END_VAR 
VAR  SENSOR_STAMPSWITCHMANUELLAUTOMATIC : BOOL; END_VAR 
VAR  SENSOR_STAMPUP : BOOL; END_VAR 
VAR  SENSOR_STARTBUTTONMAGAZIN : BOOL; END_VAR 
VAR  SENSOR_WORKPIECEREADY : BOOL; END_VAR 
VAR_INPUT  STAMP_CRANEDOWN : BOOL; END_VAR 
VAR_INPUT  STAMP_CRANEONCONVEYOR : BOOL; END_VAR 
VAR_INPUT  STAMP_CRANEPOSITIONSTAMP : BOOL; END_VAR 
VAR_INPUT  STAMP_CRANESUCKED : BOOL; END_VAR 
VAR_INPUT  STAMP_CRANEUP : BOOL; END_VAR 
VAR  STAMP_DURATION : UINT := UINT#125; END_VAR 
VAR  STAMP_SFCINIT : BOOL; END_VAR 
VAR_INPUT  STAMP_SFCRESET : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STAMPGREENLAMP : BOOL; END_VAR 
VAR_INPUT  STAMP_STAMPLOWERED : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STAMPPRESSURE : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STAMPPUSHER : BOOL; END_VAR 
VAR_INPUT  STAMP_STAMPSLIDERFILLED : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STAMPSLIDERMOVEDIN : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STAMPSLIDERMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  STAMP_STAMPSLIDERSENSORMOVEDIN : BOOL; END_VAR 
VAR_INPUT  STAMP_STAMPSLIDERSENSORMOVEDOUT : BOOL; END_VAR 
VAR_INPUT  STAMP_STAMPSTARTBUTTON : BOOL; END_VAR 
VAR_INPUT  STAMP_STAMPUP : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STAMPWHITELAMP : BOOL; END_VAR 
VAR_OUTPUT  STAMP_STARTCOMMANDSTAMP : BOOL; END_VAR 
VAR_INPUT  STAMP_STARTVAR : BOOL; END_VAR 
VAR_OUTPUT  STAMP_TIMER_ET : UINT; END_VAR 
VAR_INPUT  STAMP_TIMER_IN : BOOL; END_VAR 
VAR_INPUT  STAMP_TIMER_PT : UINT; END_VAR 
VAR_OUTPUT  STAMP_TIMER_Q : BOOL; END_VAR 
VAR  STAMP_2STATE : STAMP_STATES_T; END_VAR 
VAR  STAMP_2TRANSIT : BOOL; END_VAR 
VAR  STAMP_INTERCONNECT : BOOL; END_VAR 
VAR  STAMP_INTERCONNECTSTAMPSTARTCOMMAND : BOOL; END_VAR 
MAG_SLIDERNOTMOVEDOUT := SENSOR_SLIDERNOTMOVEDOUT;
MAG_SLIDERMOVEDOUT := SENSOR_SLIDERMOVEDOUT;
MAG_CRANEONMAGAZIN := SENSOR_CRANEONMAGAZIN;
MAG_CRANEDOWN := SENSOR_CRANEDOWN;
MAG_CRANEUP := SENSOR_CRANEUP;
MAG_CRANEONCONVEYOR := SENSOR_CRANEONCONVEYOR;
MAG_WORKPIECEREADY := SENSOR_WORKPIECEREADY;
MAG_STARTBUTTONMAGAZIN := SENSOR_STARTBUTTONMAGAZIN;
ACTUATOR_MAGAZINSLIDER := MAG_MAGAZINSLIDER;
ACTUATOR_MAGAZINGREENLAMP := MAG_MAGAZINGREENLAMP;
CRANE_CRANEUP := SENSOR_CRANEUP;
CRANE_CRANEONCONVEYOR := SENSOR_CRANEONCONVEYOR;
CRANE_CRANEDOWN := SENSOR_CRANEDOWN;
CRANE_CRANESUCKED := SENSOR_CRANESUCKED;
CRANE_CRANEONMAGAZIN := SENSOR_CRANEONMAGAZIN;
CRANE_MAGAZINCAPACITIVESENSOR := SENSOR_MAGAZINCAPACITIVESENSOR;
CRANE_CRANEPOSITIONSTAMP := SENSOR_CRANEPOSITIONSTAMP;
CRANE_SLIDERMOVEDOUT := SENSOR_SLIDERMOVEDOUT;
CRANE_WORKPIECEREADY := SENSOR_WORKPIECEREADY;
CRANE_MAGAZINOPTICALSENSOR := SENSOR_MAGAZINOPTICALSENSOR;
CRANE_STAMPSLIDERFILLED := SENSOR_STAMPSLIDERFILLED;
CRANE_STAMPSLIDERSENSORMOVEDOUT := SENSOR_STAMPSLIDERSENSORMOVEDOUT;
CRANE_STAMPLOWERED := SENSOR_STAMPLOWERED;
CRANE_STARTBUTTONMAGAZIN := SENSOR_STARTBUTTONMAGAZIN;
ACTUATOR_CRANETURNCOUNTERCLOCKWISE := CRANE_CRANETURNCOUNTERCLOCKWISE;
ACTUATOR_CRANETURNCLOCKWISE := CRANE_CRANETURNCLOCKWISE;
ACTUATOR_CRANELOWER := CRANE_CRANELOWER;
ACTUATOR_MAGAZINVACUUMOFF := CRANE_MAGAZINVACUUMOFF;
ACTUATOR_MAGAZINVACUUMON := CRANE_MAGAZINVACUUMON;
STAMP_STAMPSLIDERSENSORMOVEDOUT := SENSOR_STAMPSLIDERSENSORMOVEDOUT;
STAMP_STAMPSLIDERSENSORMOVEDIN := SENSOR_STAMPSLIDERSENSORMOVEDIN;
STAMP_STAMPSLIDERFILLED := SENSOR_STAMPSLIDERFILLED;
STAMP_STAMPUP := SENSOR_STAMPUP;
STAMP_STAMPLOWERED := SENSOR_STAMPLOWERED;
STAMP_CRANEDOWN := SENSOR_CRANEDOWN;
STAMP_CRANEUP := SENSOR_CRANEUP;
STAMP_CRANESUCKED := SENSOR_CRANESUCKED;
STAMP_CRANEPOSITIONSTAMP := SENSOR_CRANEPOSITIONSTAMP;
STAMP_CRANEONCONVEYOR := SENSOR_CRANEONCONVEYOR;
STAMP_STAMPSTARTBUTTON := SENSOR_STAMPSTARTBUTTON;
ACTUATOR_STAMPSLIDERMOVEDOUT := STAMP_STAMPSLIDERMOVEDOUT;
ACTUATOR_STAMPSLIDERMOVEDIN := STAMP_STAMPSLIDERMOVEDIN;
ACTUATOR_STAMPWHITELAMP := STAMP_STAMPWHITELAMP;
ACTUATOR_STAMPPUSHER := STAMP_STAMPPUSHER;
ACTUATOR_STAMPGREENLAMP := STAMP_STAMPGREENLAMP;
ACTUATOR_ANALOGCRANEPRESSURE := INT#6000;
IF (SENSOR_STAMPEMERGENCYSTOP AND SENSOR_MAGAZINEMERGENCYSTOP) THEN
    CASE MAG_2STATE OF 
        MAGAZIN_STATES_T#GREEN_LAMP:
            MAG_2TRANSIT := FALSE;
            MAG_MAGAZINGREENLAMP := TRUE;
            MAG_INTERCONNECTMAGAZINSTARTCOMMAND := FALSE;
            IF TRUE THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#MAGAZIN_INIT;
            END_IF;
        
        MAGAZIN_STATES_T#INIT:
            MAG_2TRANSIT := FALSE;
            IF TRUE THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#START_MAGAZIN;
            END_IF;
        
        MAGAZIN_STATES_T#INTERSTEP:
            MAG_2TRANSIT := FALSE;
            MAG_STARTCOMMANDMAGAZIN := TRUE;
            IF MAG_STARTVAR THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#CONVEY;
            END_IF;
        
        MAGAZIN_STATES_T#MAGAZIN_INIT:
            MAG_2TRANSIT := FALSE;
            MAG_MAGAZINSLIDER := TRUE;
            IF TRUE THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#MAGAZIN_INIT_2;
            END_IF;
        
        MAGAZIN_STATES_T#MAGAZIN_INIT_2:
            MAG_2TRANSIT := FALSE;
            MAG_MAGAZINSLIDER := FALSE;
            IF TRUE THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#INTERSTEP;
            END_IF;
        
        MAGAZIN_STATES_T#SLIDER_MOVE_BACK:
            MAG_2TRANSIT := FALSE;
            IF ((MAG_SLIDERMOVEDOUT = TRUE) AND (MAG_SLIDERNOTMOVEDOUT = FALSE)) THEN
                MAG_MAGAZINSLIDER := FALSE;
            END_IF;
            IF MAG_CRANEUP THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#STEP1;
            END_IF;
        
        MAGAZIN_STATES_T#START_MAGAZIN:
            MAG_2TRANSIT := FALSE;
            MAG_MAGAZINSLIDER := FALSE;
            MAG_MAGAZINGREENLAMP := FALSE;
            MAG_STARTVAR := FALSE;
            MAG_STARTCOMMANDMAGAZIN := FALSE;
            IF (MAG_STARTBUTTONMAGAZIN = TRUE) THEN
                MAG_INTERCONNECTMAGAZINSTARTCOMMAND := TRUE;
            END_IF;
            IF MAG_INTERCONNECTMAGAZINSTARTCOMMAND THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#GREEN_LAMP;
            END_IF;
        
        MAGAZIN_STATES_T#STEP0:
            MAG_2TRANSIT := FALSE;
            IF MAG_CRANEDOWN THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#SLIDER_MOVE_BACK;
            END_IF;
        
        MAGAZIN_STATES_T#STEP1:
            MAG_2TRANSIT := FALSE;
            IF MAG_CRANEONCONVEYOR THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#INTERSTEP;
            END_IF;
        
        MAGAZIN_STATES_T#CONVEY:
            MAG_2TRANSIT := FALSE;
            IF MAG_SLIDERNOTMOVEDOUT THEN
                MAG_MAGAZINSLIDER := TRUE;
            END_IF;
            IF MAG_CRANEONMAGAZIN THEN
                MAG_2TRANSIT := TRUE;
                MAG_2STATE := MAGAZIN_STATES_T#STEP0;
            END_IF;
        
            END_CASE;
    CASE CRANE_2STATE OF 
        CRANE_STATES_T#CRANE_GO_UP:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#STEP3;
            END_IF;
        
        CRANE_STATES_T#CRANE_INIT:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := TRUE;
            CRANE_INTERCONNECTCRANESTARTCOMMAND := FALSE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_INIT_2;
            END_IF;
        
        CRANE_STATES_T#CRANE_INIT_2:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_AT_STAMP:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_LEFT_FROM_STAMP;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_AT_STAMP2:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_RIGHT_FROM_STAMP;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_CONVEYOR:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_CONVEYOR2:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_CONVEYOR_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_LEFT_BACK_TO_STAMP;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_MAGAZIN:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_MAGAZIN_METALLIC:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC;
            END_IF;
        
        CRANE_STATES_T#CRANE_LIFT_NOT_METALLIC_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF CRANE_CRANEUP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC_BLACK;
            END_IF;
        
        CRANE_STATES_T#CRANE_LOWER:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMON := TRUE;
            CRANE_MAGAZINVACUUMOFF := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANESUCKED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#STEP0;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_CONVEYOR:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RELEASE;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RELEASE;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC2:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RELEASE2;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RELEASE_BLACK;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_STAMP_METALLIC:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RELEASE_WORKPIECE;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_STAMP_METALLIC2:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            IF CRANE_STAMPLOWERED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP_4;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_STAMP_METALLIC2_LOWER:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#SUCK_AT_STAMP2;
            END_IF;
        
        CRANE_STATES_T#CRANE_ON_STAMP_STOP_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RESET_INTERCONNECT;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_LEFT_BACK_TO_STAMP:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := TRUE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            IF CRANE_CRANEPOSITIONSTAMP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_STAMP_STOP_BLACK;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_LEFT_FROM_STAMP:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := TRUE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF CRANE_CRANEONCONVEYOR THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := TRUE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            IF CRANE_CRANEPOSITIONSTAMP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_STAMP_METALLIC;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC2:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := TRUE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            IF CRANE_CRANEPOSITIONSTAMP THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_STAMP_METALLIC2;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := TRUE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            IF CRANE_CRANEONCONVEYOR THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_CONVEYOR;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_LEFT_NOT_METALLIC_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := TRUE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            IF CRANE_CRANEONCONVEYOR THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK;
            END_IF;
        
        CRANE_STATES_T#CRANE_TURN_RIGHT_FROM_STAMP:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := TRUE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF CRANE_CRANEONCONVEYOR THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_CONVEYOR_METALLIC2;
            END_IF;
        
        CRANE_STATES_T#INIT:
            CRANE_2TRANSIT := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#START_CRANE;
            END_IF;
        
        CRANE_STATES_T#INTERSTEP:
            CRANE_2TRANSIT := FALSE;
            CRANE_STARTCOMMANDCRANE := TRUE;
            IF CRANE_STARTVAR THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP_2;
            END_IF;
        
        CRANE_STATES_T#INTERSTEP_2:
            CRANE_2TRANSIT := FALSE;
            IF CRANE_SLIDERMOVEDOUT THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#TIMEDELAY;
            END_IF;
        
        CRANE_STATES_T#INTERSTEP_3:
            CRANE_2TRANSIT := FALSE;
            IF NOT CRANE_WORKPIECEREADY THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#NO_WORKPIECE_READY;
            ELSIF CRANE_WORKPIECEREADY THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#TURN_RIGHT;
            END_IF;
        
        CRANE_STATES_T#INTERSTEP_4:
            CRANE_2TRANSIT := FALSE;
            IF CRANE_STAMPSLIDERSENSORMOVEDOUT THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_ON_STAMP_METALLIC2_LOWER;
            END_IF;
        
        CRANE_STATES_T#LOWER_CRANE:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANEDOWN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#SUCK_AT_STAMP;
            END_IF;
        
        CRANE_STATES_T#MAGAZIN_STOP:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LOWER;
            END_IF;
        
        CRANE_STATES_T#MAGAZIN_STOP_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_MAGAZINVACUUMON := TRUE;
            CRANE_MAGAZINVACUUMOFF := FALSE;
            CRANE_CRANELOWER := TRUE;
            IF CRANE_CRANESUCKED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_NOT_METALLIC_BLACK;
            END_IF;
        
        CRANE_STATES_T#MAGAZIN_STOP_FINAL:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#START_CRANE;
            END_IF;
        
        CRANE_STATES_T#NO_WORKPIECE_READY:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMON := FALSE;
            CRANE_MAGAZINVACUUMOFF := FALSE;
            CRANE_CRANELOWER := FALSE;
            IF NOT CRANE_STAMPSLIDERFILLED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#TURN_RIGHT_FINAL;
            ELSIF CRANE_STAMPSLIDERFILLED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_TURN_LEFT_METALLIC2;
            END_IF;
        
        CRANE_STATES_T#RESET_INTERCONNECT:
            CRANE_2TRANSIT := FALSE;
            CRANE_INTERCONNECT := FALSE;
            CRANE_TIMER1_IN := FALSE;
            CRANE_TIMER1_PT := UINT#0;
            IF CRANE_TIMER1_IN THEN
                CRANE_TIMER1_Q := (CRANE_TIMER1_ET = UINT#0);
                IF (CRANE_TIMER1_ET > UINT#0) THEN
                    CRANE_TIMER1_ET := (CRANE_TIMER1_ET - UINT#1);
                ELSE
                    CRANE_TIMER1_ET := UINT#0;
                END_IF;
            ELSE
                CRANE_TIMER1_Q := FALSE;
                CRANE_TIMER1_ET := CRANE_TIMER1_PT;
            END_IF;
            IF CRANE_SLIDERMOVEDOUT THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#LOWER_CRANE;
            END_IF;
        
        CRANE_STATES_T#START_CRANE:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANELOWER := FALSE;
            CRANE_MAGAZINVACUUMOFF := FALSE;
            CRANE_MAGAZINVACUUMON := FALSE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            CRANE_CRANETURNCLOCKWISE := FALSE;
            CRANE_STARTVAR := FALSE;
            CRANE_STARTCOMMANDCRANE := FALSE;
            IF (CRANE_STARTBUTTONMAGAZIN = TRUE) THEN
                CRANE_INTERCONNECTCRANESTARTCOMMAND := TRUE;
            END_IF;
            IF CRANE_INTERCONNECTCRANESTARTCOMMAND THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_INIT;
            END_IF;
        
        CRANE_STATES_T#STEP0:
            CRANE_2TRANSIT := FALSE;
            IF (NOT CRANE_MAGAZINCAPACITIVESENSOR AND NOT CRANE_MAGAZINOPTICALSENSOR) THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_MAGAZIN;
            ELSIF (CRANE_MAGAZINCAPACITIVESENSOR OR CRANE_MAGAZINOPTICALSENSOR) THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_MAGAZIN_METALLIC;
            END_IF;
        
        CRANE_STATES_T#STEP2:
            CRANE_2TRANSIT := FALSE;
            IF (CRANE_MAGAZINCAPACITIVESENSOR OR CRANE_MAGAZINOPTICALSENSOR) THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#PAUSE;
            ELSIF (NOT CRANE_MAGAZINCAPACITIVESENSOR AND NOT CRANE_MAGAZINOPTICALSENSOR) THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#TURN_RIGHT_BLACK;
            END_IF;
        
        CRANE_STATES_T#STEP3:
            CRANE_2TRANSIT := FALSE;
            IF NOT CRANE_WORKPIECEREADY THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#STEP4;
            ELSIF CRANE_WORKPIECEREADY THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#STEP2;
            END_IF;
        
        CRANE_STATES_T#STEP4:
            CRANE_2TRANSIT := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP;
            END_IF;
        
        CRANE_STATES_T#SUCK_AT_STAMP:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMON := TRUE;
            CRANE_MAGAZINVACUUMOFF := FALSE;
            IF CRANE_CRANESUCKED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_AT_STAMP;
            END_IF;
        
        CRANE_STATES_T#SUCK_AT_STAMP2:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMON := TRUE;
            CRANE_MAGAZINVACUUMOFF := FALSE;
            IF CRANE_CRANESUCKED THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_AT_STAMP2;
            END_IF;
        
        CRANE_STATES_T#TIMEDELAY:
            CRANE_2TRANSIT := FALSE;
            CRANE_TIMEDELAY_TIMER_IN := TRUE;
            CRANE_TIMEDELAY_TIMER_PT := CRANE_TIMEDELAY_TIMER_DURATION;
            IF CRANE_TIMEDELAY_TIMER_IN THEN
                CRANE_TIMEDELAY_TIMER_Q := (CRANE_TIMEDELAY_TIMER_ET = UINT#0);
                IF (CRANE_TIMEDELAY_TIMER_ET > UINT#0) THEN
                    CRANE_TIMEDELAY_TIMER_ET := (CRANE_TIMEDELAY_TIMER_ET - UINT#1);
                ELSE
                    CRANE_TIMEDELAY_TIMER_ET := UINT#0;
                END_IF;
            ELSE
                CRANE_TIMEDELAY_TIMER_Q := FALSE;
                CRANE_TIMEDELAY_TIMER_ET := CRANE_TIMEDELAY_TIMER_PT;
            END_IF;
            CRANE_TIMEDELAY_TIMER_INTERCONNECT := CRANE_TIMEDELAY_TIMER_Q;
            IF CRANE_TIMEDELAY_TIMER_INTERCONNECT THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#INTERSTEP_3;
            END_IF;
        
        CRANE_STATES_T#TURN_RIGHT:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := TRUE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF CRANE_CRANEONMAGAZIN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#MAGAZIN_STOP;
            END_IF;
        
        CRANE_STATES_T#TURN_RIGHT_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := TRUE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF CRANE_CRANEONMAGAZIN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#MAGAZIN_STOP_BLACK;
            END_IF;
        
        CRANE_STATES_T#TURN_RIGHT_FINAL:
            CRANE_2TRANSIT := FALSE;
            CRANE_CRANETURNCLOCKWISE := TRUE;
            CRANE_CRANETURNCOUNTERCLOCKWISE := FALSE;
            IF CRANE_CRANEONMAGAZIN THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#MAGAZIN_STOP_FINAL;
            END_IF;
        
        CRANE_STATES_T#PAUSE:
            CRANE_2TRANSIT := FALSE;
            CRANE_TIMER1_IN := CRANE_CRANEUP;
            CRANE_TIMER1_PT := CRANE_DURATION1;
            IF CRANE_TIMER1_IN THEN
                CRANE_TIMER1_Q := (CRANE_TIMER1_ET = UINT#0);
                IF (CRANE_TIMER1_ET > UINT#0) THEN
                    CRANE_TIMER1_ET := (CRANE_TIMER1_ET - UINT#1);
                ELSE
                    CRANE_TIMER1_ET := UINT#0;
                END_IF;
            ELSE
                CRANE_TIMER1_Q := FALSE;
                CRANE_TIMER1_ET := CRANE_TIMER1_PT;
            END_IF;
            CRANE_INTERCONNECT := CRANE_TIMER1_Q;
            IF CRANE_INTERCONNECT THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#RESET_INTERCONNECT;
            END_IF;
        
        CRANE_STATES_T#RELEASE:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMOFF := TRUE;
            CRANE_MAGAZINVACUUMON := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_CONVEYOR;
            END_IF;
        
        CRANE_STATES_T#RELEASE2:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMOFF := TRUE;
            CRANE_MAGAZINVACUUMON := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_CONVEYOR2;
            END_IF;
        
        CRANE_STATES_T#RELEASE_BLACK:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMON := FALSE;
            CRANE_MAGAZINVACUUMOFF := TRUE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_LIFT_CONVEYOR_BLACK;
            END_IF;
        
        CRANE_STATES_T#RELEASE_WORKPIECE:
            CRANE_2TRANSIT := FALSE;
            CRANE_MAGAZINVACUUMOFF := TRUE;
            CRANE_MAGAZINVACUUMON := FALSE;
            IF TRUE THEN
                CRANE_2TRANSIT := TRUE;
                CRANE_2STATE := CRANE_STATES_T#CRANE_GO_UP;
            END_IF;
        
            END_CASE;
    CASE STAMP_2STATE OF 
        STAMP_STATES_T#GREEN_LAMP:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPGREENLAMP := TRUE;
            STAMP_INTERCONNECTSTAMPSTARTCOMMAND := FALSE;
            IF TRUE THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMP_INIT_1;
            END_IF;
        
        STAMP_STATES_T#INIT:
            STAMP_2TRANSIT := FALSE;
            IF TRUE THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#START_STAMP;
            END_IF;
        
        STAMP_STATES_T#INTERSTEP:
            STAMP_2TRANSIT := FALSE;
            STAMP_STARTCOMMANDSTAMP := TRUE;
            IF STAMP_STARTVAR THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#INTERSTEP_2;
            END_IF;
        
        STAMP_STATES_T#INTERSTEP_2:
            STAMP_2TRANSIT := FALSE;
            IF STAMP_STAMPSLIDERFILLED THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STEP0;
            END_IF;
        
        STAMP_STATES_T#STAMPPROCESS:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPSLIDERMOVEDIN := FALSE;
            STAMP_STAMPPUSHER := TRUE;
            IF STAMP_STAMPLOWERED THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STEP1;
            END_IF;
        
        STAMP_STATES_T#STAMPSLIDERBACK:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPSLIDERMOVEDIN := TRUE;
            STAMP_STAMPSLIDERMOVEDOUT := FALSE;
            IF STAMP_STAMPSLIDERSENSORMOVEDIN THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMPPROCESS;
            END_IF;
        
        STAMP_STATES_T#STAMPSLIDERFORWARD:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPPUSHER := FALSE;
            STAMP_STAMPSLIDERMOVEDOUT := TRUE;
            IF ((STAMP_STAMPLOWERED = FALSE) AND (STAMP_STAMPUP = TRUE)) THEN
                STAMP_INTERCONNECT := FALSE;
            END_IF;
            STAMP_TIMER_IN := FALSE;
            STAMP_TIMER_PT := UINT#0;
            IF STAMP_TIMER_IN THEN
                STAMP_TIMER_Q := (STAMP_TIMER_ET = UINT#0);
                IF (STAMP_TIMER_ET > UINT#0) THEN
                    STAMP_TIMER_ET := (STAMP_TIMER_ET - UINT#1);
                ELSE
                    STAMP_TIMER_ET := UINT#0;
                END_IF;
            ELSE
                STAMP_TIMER_Q := FALSE;
                STAMP_TIMER_ET := STAMP_TIMER_PT;
            END_IF;
            IF STAMP_STAMPSLIDERMOVEDOUT THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STEP2;
            END_IF;
        
        STAMP_STATES_T#STAMP_INIT_1:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPSLIDERMOVEDIN := TRUE;
            STAMP_STAMPSLIDERMOVEDOUT := FALSE;
            IF STAMP_STAMPSLIDERSENSORMOVEDIN THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMP_INIT_2;
            END_IF;
        
        STAMP_STATES_T#STAMP_INIT_2:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPSLIDERMOVEDIN := FALSE;
            STAMP_STAMPSLIDERMOVEDOUT := TRUE;
            IF STAMP_STAMPSLIDERSENSORMOVEDOUT THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMP_INIT_3;
            END_IF;
        
        STAMP_STATES_T#STAMP_INIT_3:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPPUSHER := TRUE;
            IF STAMP_STAMPLOWERED THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMP_INIT_4;
            END_IF;
        
        STAMP_STATES_T#STAMP_INIT_4:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPPUSHER := FALSE;
            IF STAMP_STAMPUP THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#INTERSTEP;
            END_IF;
        
        STAMP_STATES_T#START_STAMP:
            STAMP_2TRANSIT := FALSE;
            STAMP_STAMPSLIDERMOVEDOUT := FALSE;
            STAMP_STAMPSLIDERMOVEDIN := FALSE;
            STAMP_STAMPPUSHER := FALSE;
            STAMP_STAMPGREENLAMP := FALSE;
            STAMP_STAMPPRESSURE := FALSE;
            STAMP_STARTCOMMANDSTAMP := FALSE;
            IF (STAMP_STAMPSTARTBUTTON = TRUE) THEN
                STAMP_INTERCONNECTSTAMPSTARTCOMMAND := TRUE;
            END_IF;
            IF STAMP_INTERCONNECTSTAMPSTARTCOMMAND THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#GREEN_LAMP;
            END_IF;
        
        STAMP_STATES_T#STEP0:
            STAMP_2TRANSIT := FALSE;
            IF STAMP_CRANEUP THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMPSLIDERBACK;
            END_IF;
        
        STAMP_STATES_T#STEP1:
            STAMP_2TRANSIT := FALSE;
            STAMP_TIMER_IN := STAMP_STAMPLOWERED;
            STAMP_TIMER_PT := UINT#0;
            IF STAMP_TIMER_IN THEN
                STAMP_TIMER_Q := (STAMP_TIMER_ET = UINT#0);
                IF (STAMP_TIMER_ET > UINT#0) THEN
                    STAMP_TIMER_ET := (STAMP_TIMER_ET - UINT#1);
                ELSE
                    STAMP_TIMER_ET := UINT#0;
                END_IF;
            ELSE
                STAMP_TIMER_Q := FALSE;
                STAMP_TIMER_ET := STAMP_TIMER_PT;
            END_IF;
            STAMP_INTERCONNECT := STAMP_TIMER_Q;
            IF STAMP_INTERCONNECT THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#STAMPSLIDERFORWARD;
            END_IF;
        
        STAMP_STATES_T#STEP2:
            STAMP_2TRANSIT := FALSE;
            IF (STAMP_CRANEONCONVEYOR AND NOT STAMP_STAMPSLIDERFILLED) THEN
                STAMP_2TRANSIT := TRUE;
                STAMP_2STATE := STAMP_STATES_T#INTERSTEP;
            END_IF;
        
            END_CASE;
    IF (ACTUATOR_MAGAZINGREENLAMP AND ACTUATOR_STAMPGREENLAMP) THEN
        IF ((STAMP_STARTCOMMANDSTAMP AND CRANE_STARTCOMMANDCRANE) AND MAG_STARTCOMMANDMAGAZIN) THEN
            CRANE_STARTVAR := TRUE;
            MAG_STARTVAR := TRUE;
            STAMP_STARTVAR := TRUE;
        END_IF;
    END_IF;
    CRANE_SFCRESET := FALSE;
    MAG_SFCRESET := FALSE;
    STAMP_SFCRESET := FALSE;
ELSIF (NOT SENSOR_STAMPEMERGENCYSTOP OR NOT SENSOR_MAGAZINEMERGENCYSTOP) THEN
    ACTUATOR_MAGAZINSLIDER := FALSE;
    ACTUATOR_CRANELOWER := FALSE;
    ACTUATOR_MAGAZINVACUUMON := FALSE;
    ACTUATOR_MAGAZINVACUUMOFF := TRUE;
    ACTUATOR_MAGAZINGREENLAMP := FALSE;
    ACTUATOR_CRANETURNCOUNTERCLOCKWISE := FALSE;
    ACTUATOR_CRANETURNCLOCKWISE := FALSE;
    ACTUATOR_STAMPSLIDERMOVEDOUT := TRUE;
    ACTUATOR_STAMPSLIDERMOVEDIN := FALSE;
    ACTUATOR_STAMPGREENLAMP := FALSE;
    ACTUATOR_STAMPPUSHER := FALSE;
    ACTUATOR_ANALOGCRANEPRESSURE := INT#0;
    CRANE_SFCRESET := TRUE;
    MAG_SFCRESET := TRUE;
    STAMP_SFCRESET := TRUE;
    CRANE_STARTVAR := FALSE;
    MAG_STARTVAR := FALSE;
    STAMP_STARTVAR := FALSE;
END_IF;
END_PROGRAM
CONFIGURATION Config0
  RESOURCE Res0 ON PLC
    TASK TASK0(INTERVAL := T#50MS, PRIORITY := 0);
    PROGRAM INSTANCE0 WITH TASK0 : MAIN;
  END_RESOURCE
END_CONFIGURATION
